{"ast":null,"code":"import { createAnimation } from '@arwes/animated';\nconst defaultProps = {\n  lineWidth: 1,\n  lineColor: '#777',\n  horizontalLineDash: [4],\n  verticalLineDash: [],\n  distance: 30\n};\nconst createBackgroundGridLines = props => {\n  const {\n    canvas,\n    animator\n  } = props;\n  const ctx = canvas.getContext('2d');\n  if (!ctx) {\n    return {\n      cancel: () => {}\n    };\n  }\n  let resizeObserver;\n  let transitionControl;\n  let unsubscribe;\n  const getSettings = () => ({\n    ...defaultProps,\n    ...props.settingsRef.current\n  });\n  const resize = () => {\n    const dpr = Math.min(window.devicePixelRatio || 2, 2);\n    const {\n      width,\n      height\n    } = canvas.getBoundingClientRect();\n    if (canvas.width !== width * dpr || canvas.height !== height * dpr) {\n      canvas.width = width * dpr;\n      canvas.height = height * dpr;\n    }\n    ctx.setTransform(1, 0, 0, 1, 0, 0);\n    ctx.scale(dpr, dpr);\n  };\n  const draw = () => {\n    const {\n      lineWidth,\n      lineColor,\n      horizontalLineDash,\n      verticalLineDash,\n      distance\n    } = getSettings();\n    const {\n      width,\n      height\n    } = canvas;\n    const xLength = 1 + Math.floor(width / distance);\n    const yLength = 1 + Math.floor(height / distance);\n    const xMargin = width % distance;\n    const yMargin = height % distance;\n    ctx.clearRect(0, 0, width, height);\n    ctx.lineWidth = lineWidth;\n    ctx.strokeStyle = lineColor;\n    ctx.setLineDash(horizontalLineDash);\n    for (let yIndex = 0; yIndex < yLength; yIndex++) {\n      const y = yMargin / 2 + yIndex * distance;\n      ctx.beginPath();\n      ctx.moveTo(0, y);\n      ctx.lineTo(width, y);\n      ctx.stroke();\n      ctx.closePath();\n    }\n    ctx.setLineDash(verticalLineDash);\n    for (let xIndex = 0; xIndex < xLength; xIndex++) {\n      const x = xMargin / 2 + xIndex * distance;\n      ctx.beginPath();\n      ctx.moveTo(x, 0);\n      ctx.lineTo(x, height);\n      ctx.stroke();\n      ctx.closePath();\n    }\n  };\n  const setup = () => {\n    if (typeof window !== 'undefined' && !resizeObserver) {\n      resizeObserver = new window.ResizeObserver(() => {\n        resize();\n        draw();\n      });\n      resizeObserver.observe(canvas);\n      resize();\n    }\n  };\n  const stop = () => {\n    resizeObserver?.disconnect();\n    resizeObserver = undefined;\n    transitionControl?.cancel();\n    transitionControl = undefined;\n  };\n  const start = () => {\n    if (!animator) {\n      setup();\n      draw();\n      canvas.style.opacity = '1';\n      return;\n    }\n    unsubscribe = animator.subscribe(node => {\n      switch (node.state) {\n        case 'entering':\n          {\n            setup();\n            draw();\n            transitionControl = createAnimation({\n              duration: node.settings.duration.enter,\n              onUpdate(progress) {\n                canvas.style.opacity = String(progress);\n              }\n            });\n            break;\n          }\n        case 'entered':\n          {\n            setup();\n            draw();\n            canvas.style.opacity = '1';\n            break;\n          }\n        case 'exiting':\n          {\n            transitionControl = createAnimation({\n              duration: node.settings.duration.exit,\n              onUpdate(progress) {\n                canvas.style.opacity = String(1 - progress);\n              }\n            });\n            break;\n          }\n        case 'exited':\n          {\n            stop();\n            canvas.style.opacity = '0';\n            break;\n          }\n      }\n    });\n  };\n  const cancel = () => {\n    unsubscribe?.();\n    stop();\n    canvas.style.opacity = '0';\n  };\n  start();\n  return Object.freeze({\n    cancel\n  });\n};\nexport { createBackgroundGridLines };","map":{"version":3,"names":["createAnimation","defaultProps","lineWidth","lineColor","horizontalLineDash","verticalLineDash","distance","createBackgroundGridLines","props","canvas","animator","ctx","getContext","cancel","resizeObserver","transitionControl","unsubscribe","getSettings","settingsRef","current","resize","dpr","Math","min","window","devicePixelRatio","width","height","getBoundingClientRect","setTransform","scale","draw","xLength","floor","yLength","xMargin","yMargin","clearRect","strokeStyle","setLineDash","yIndex","y","beginPath","moveTo","lineTo","stroke","closePath","xIndex","x","setup","ResizeObserver","observe","stop","disconnect","undefined","start","style","opacity","subscribe","node","state","duration","settings","enter","onUpdate","progress","String","exit","Object","freeze"],"sources":["/home/elisha-a/Nasa/client/node_modules/@arwes/bgs/build/esm/createBackgroundGridLines/createBackgroundGridLines.js"],"sourcesContent":["import { createAnimation } from '@arwes/animated';\nconst defaultProps = {\n    lineWidth: 1,\n    lineColor: '#777',\n    horizontalLineDash: [4],\n    verticalLineDash: [],\n    distance: 30\n};\nconst createBackgroundGridLines = (props) => {\n    const { canvas, animator } = props;\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n        return { cancel: () => { } };\n    }\n    let resizeObserver;\n    let transitionControl;\n    let unsubscribe;\n    const getSettings = () => ({\n        ...defaultProps,\n        ...props.settingsRef.current\n    });\n    const resize = () => {\n        const dpr = Math.min(window.devicePixelRatio || 2, 2);\n        const { width, height } = canvas.getBoundingClientRect();\n        if (canvas.width !== width * dpr || canvas.height !== height * dpr) {\n            canvas.width = width * dpr;\n            canvas.height = height * dpr;\n        }\n        ctx.setTransform(1, 0, 0, 1, 0, 0);\n        ctx.scale(dpr, dpr);\n    };\n    const draw = () => {\n        const { lineWidth, lineColor, horizontalLineDash, verticalLineDash, distance } = getSettings();\n        const { width, height } = canvas;\n        const xLength = 1 + Math.floor(width / distance);\n        const yLength = 1 + Math.floor(height / distance);\n        const xMargin = width % distance;\n        const yMargin = height % distance;\n        ctx.clearRect(0, 0, width, height);\n        ctx.lineWidth = lineWidth;\n        ctx.strokeStyle = lineColor;\n        ctx.setLineDash(horizontalLineDash);\n        for (let yIndex = 0; yIndex < yLength; yIndex++) {\n            const y = yMargin / 2 + yIndex * distance;\n            ctx.beginPath();\n            ctx.moveTo(0, y);\n            ctx.lineTo(width, y);\n            ctx.stroke();\n            ctx.closePath();\n        }\n        ctx.setLineDash(verticalLineDash);\n        for (let xIndex = 0; xIndex < xLength; xIndex++) {\n            const x = xMargin / 2 + xIndex * distance;\n            ctx.beginPath();\n            ctx.moveTo(x, 0);\n            ctx.lineTo(x, height);\n            ctx.stroke();\n            ctx.closePath();\n        }\n    };\n    const setup = () => {\n        if (typeof window !== 'undefined' && !resizeObserver) {\n            resizeObserver = new window.ResizeObserver(() => {\n                resize();\n                draw();\n            });\n            resizeObserver.observe(canvas);\n            resize();\n        }\n    };\n    const stop = () => {\n        resizeObserver?.disconnect();\n        resizeObserver = undefined;\n        transitionControl?.cancel();\n        transitionControl = undefined;\n    };\n    const start = () => {\n        if (!animator) {\n            setup();\n            draw();\n            canvas.style.opacity = '1';\n            return;\n        }\n        unsubscribe = animator.subscribe((node) => {\n            switch (node.state) {\n                case 'entering': {\n                    setup();\n                    draw();\n                    transitionControl = createAnimation({\n                        duration: node.settings.duration.enter,\n                        onUpdate(progress) {\n                            canvas.style.opacity = String(progress);\n                        }\n                    });\n                    break;\n                }\n                case 'entered': {\n                    setup();\n                    draw();\n                    canvas.style.opacity = '1';\n                    break;\n                }\n                case 'exiting': {\n                    transitionControl = createAnimation({\n                        duration: node.settings.duration.exit,\n                        onUpdate(progress) {\n                            canvas.style.opacity = String(1 - progress);\n                        }\n                    });\n                    break;\n                }\n                case 'exited': {\n                    stop();\n                    canvas.style.opacity = '0';\n                    break;\n                }\n            }\n        });\n    };\n    const cancel = () => {\n        unsubscribe?.();\n        stop();\n        canvas.style.opacity = '0';\n    };\n    start();\n    return Object.freeze({ cancel });\n};\nexport { createBackgroundGridLines };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}