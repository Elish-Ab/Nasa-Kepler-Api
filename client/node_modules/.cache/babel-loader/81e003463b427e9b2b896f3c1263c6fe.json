{"ast":null,"code":"import { createTOScheduler, filterProps } from '@arwes/tools';\nimport { ANIMATOR_DEFAULT_SETTINGS } from '../constants.js';\nimport { createAnimatorMachine } from '../internal/createAnimatorMachine.js';\nimport { createAnimatorManager } from '../internal/createAnimatorManager.js';\nimport { isNodeConditionCorrect } from '../internal/isNodeConditionCorrect.js';\nconst createAnimatorSystem = () => {\n  const systemId = `s${Math.random()}`.replace('.', '');\n  let nodeIdCounter = 0;\n  let root;\n  const createNode = (parent, setup) => {\n    const nodeId = `${systemId}-n${nodeIdCounter++}`;\n    const node = {\n      id: nodeId\n    };\n    let dynamicSettingsOptional = null;\n    let foreign = null;\n    const control = Object.freeze({\n      getSettings: () => {\n        const setupSettings = setup?.getSettings() || {};\n        const dynamicSettings = dynamicSettingsOptional || {};\n        return {\n          ...setupSettings,\n          ...dynamicSettings,\n          duration: {\n            ...setupSettings.duration,\n            ...dynamicSettings.duration\n          },\n          condition: dynamicSettings.condition !== undefined ? dynamicSettings.condition : setupSettings.condition !== undefined ? setupSettings.condition : undefined,\n          onTransition: node => {\n            setupSettings.onTransition?.(node);\n            dynamicSettings.onTransition?.(node);\n          }\n        };\n      },\n      setSettings: newSettings => {\n        if (newSettings === null) {\n          dynamicSettingsOptional = null;\n          return;\n        }\n        dynamicSettingsOptional = {\n          ...dynamicSettingsOptional,\n          ...newSettings,\n          duration: {\n            ...dynamicSettingsOptional?.duration,\n            ...newSettings.duration\n          }\n        };\n      },\n      getForeign: () => foreign,\n      setForeign: value => {\n        foreign = value;\n      }\n    });\n    const initialSettings = control.getSettings();\n    const machine = createAnimatorMachine(node, initialSettings.initialState ?? ANIMATOR_DEFAULT_SETTINGS.initialState);\n    const manager = createAnimatorManager(node, initialSettings.manager ?? ANIMATOR_DEFAULT_SETTINGS.manager);\n    const nodeProps = {\n      _parent: {\n        value: parent,\n        enumerable: true\n      },\n      _children: {\n        value: new Set(),\n        enumerable: true\n      },\n      _subscribers: {\n        value: new Set(),\n        enumerable: true\n      },\n      _watchers: {\n        value: new Set(),\n        enumerable: true\n      },\n      _scheduler: {\n        value: createTOScheduler(),\n        enumerable: true\n      },\n      _getUserSettings: {\n        value: () => {\n          const controlSettings = node.control.getSettings();\n          return {\n            ...ANIMATOR_DEFAULT_SETTINGS,\n            ...filterProps(controlSettings),\n            duration: {\n              ...ANIMATOR_DEFAULT_SETTINGS.duration,\n              ...(controlSettings.duration ? filterProps(controlSettings.duration) : null)\n            }\n          };\n        },\n        enumerable: true\n      },\n      _manager: {\n        value: manager,\n        enumerable: true,\n        writable: true\n      },\n      id: {\n        value: nodeId,\n        enumerable: true\n      },\n      state: {\n        get: () => machine.getState(),\n        enumerable: true\n      },\n      control: {\n        value: control,\n        enumerable: true\n      },\n      settings: {\n        get: () => {\n          const settings = node._getUserSettings();\n          let enter = settings.duration.enter;\n          if (settings.combine) {\n            const children = Array.from(node._children).filter(child => {\n              const {\n                condition\n              } = child.control.getSettings();\n              return isNodeConditionCorrect(child, condition);\n            });\n            enter = node._manager.getDurationEnter(children);\n          }\n          return {\n            ...settings,\n            duration: {\n              ...settings.duration,\n              enter\n            }\n          };\n        },\n        enumerable: true\n      },\n      subscribe: {\n        value: subscriber => {\n          node._subscribers.add(subscriber);\n          subscriber(node);\n          return () => node._subscribers.delete(subscriber);\n        },\n        enumerable: true\n      },\n      unsubscribe: {\n        value: subscriber => {\n          node._subscribers.delete(subscriber);\n        },\n        enumerable: true\n      },\n      send: {\n        value: machine.send,\n        enumerable: true\n      }\n    };\n    Object.defineProperties(node, nodeProps);\n    if (parent) {\n      parent._children.add(node);\n    }\n    return node;\n  };\n  const removeNode = node => {\n    node._scheduler.stopAll();\n    for (const child of node._children) {\n      removeNode(child);\n    }\n    if (node._parent) {\n      node._parent._children.delete(node);\n    }\n    node._children.clear();\n    node._subscribers.clear();\n    node._watchers.clear();\n  };\n  const register = (parentNode, setup) => {\n    if (parentNode === undefined || parentNode === null) {\n      if (root) {\n        throw new Error('ARWES animator root node must be unregistered before registering another root node.');\n      }\n      root = createNode(undefined, setup);\n      return root;\n    }\n    if (!root) {\n      throw new Error('ARWES animator system requires an animator root node before registering children nodes. This means the provided animator parent node does not belong to the system.');\n    }\n    return createNode(parentNode, setup);\n  };\n  const unregister = node => {\n    if (!root) {\n      return;\n    }\n    for (const watcher of node._watchers) {\n      watcher(node);\n    }\n    removeNode(node);\n    if (root.id === node.id) {\n      root = undefined;\n    }\n  };\n  const system = {};\n  const systemProps = {\n    id: {\n      value: systemId,\n      enumerable: true\n    },\n    root: {\n      get: () => root,\n      enumerable: true\n    },\n    register: {\n      value: register,\n      enumerable: true\n    },\n    unregister: {\n      value: unregister,\n      enumerable: true\n    }\n  };\n  Object.defineProperties(system, systemProps);\n  return system;\n};\nexport { createAnimatorSystem };","map":{"version":3,"names":["createTOScheduler","filterProps","ANIMATOR_DEFAULT_SETTINGS","createAnimatorMachine","createAnimatorManager","isNodeConditionCorrect","createAnimatorSystem","systemId","Math","random","replace","nodeIdCounter","root","createNode","parent","setup","nodeId","node","id","dynamicSettingsOptional","foreign","control","Object","freeze","getSettings","setupSettings","dynamicSettings","duration","condition","undefined","onTransition","setSettings","newSettings","getForeign","setForeign","value","initialSettings","machine","initialState","manager","nodeProps","_parent","enumerable","_children","Set","_subscribers","_watchers","_scheduler","_getUserSettings","controlSettings","_manager","writable","state","get","getState","settings","enter","combine","children","Array","from","filter","child","getDurationEnter","subscribe","subscriber","add","delete","unsubscribe","send","defineProperties","removeNode","stopAll","clear","register","parentNode","Error","unregister","watcher","system","systemProps"],"sources":["/home/elisha-a/Nasa/client/node_modules/@arwes/animator/build/esm/createAnimatorSystem/createAnimatorSystem.js"],"sourcesContent":["import { createTOScheduler, filterProps } from '@arwes/tools';\nimport { ANIMATOR_DEFAULT_SETTINGS } from '../constants.js';\nimport { createAnimatorMachine } from '../internal/createAnimatorMachine.js';\nimport { createAnimatorManager } from '../internal/createAnimatorManager.js';\nimport { isNodeConditionCorrect } from '../internal/isNodeConditionCorrect.js';\nconst createAnimatorSystem = () => {\n    const systemId = `s${Math.random()}`.replace('.', '');\n    let nodeIdCounter = 0;\n    let root;\n    const createNode = (parent, setup) => {\n        const nodeId = `${systemId}-n${nodeIdCounter++}`;\n        const node = { id: nodeId };\n        let dynamicSettingsOptional = null;\n        let foreign = null;\n        const control = Object.freeze({\n            getSettings: () => {\n                const setupSettings = setup?.getSettings() || {};\n                const dynamicSettings = dynamicSettingsOptional || {};\n                return {\n                    ...setupSettings,\n                    ...dynamicSettings,\n                    duration: {\n                        ...setupSettings.duration,\n                        ...dynamicSettings.duration\n                    },\n                    condition: dynamicSettings.condition !== undefined\n                        ? dynamicSettings.condition\n                        : setupSettings.condition !== undefined\n                            ? setupSettings.condition\n                            : undefined,\n                    onTransition: (node) => {\n                        setupSettings.onTransition?.(node);\n                        dynamicSettings.onTransition?.(node);\n                    }\n                };\n            },\n            setSettings: (newSettings) => {\n                if (newSettings === null) {\n                    dynamicSettingsOptional = null;\n                    return;\n                }\n                dynamicSettingsOptional = {\n                    ...dynamicSettingsOptional,\n                    ...newSettings,\n                    duration: {\n                        ...dynamicSettingsOptional?.duration,\n                        ...newSettings.duration\n                    }\n                };\n            },\n            getForeign: () => foreign,\n            setForeign: (value) => {\n                foreign = value;\n            }\n        });\n        const initialSettings = control.getSettings();\n        const machine = createAnimatorMachine(node, initialSettings.initialState ?? ANIMATOR_DEFAULT_SETTINGS.initialState);\n        const manager = createAnimatorManager(node, initialSettings.manager ?? ANIMATOR_DEFAULT_SETTINGS.manager);\n        const nodeProps = {\n            _parent: {\n                value: parent,\n                enumerable: true\n            },\n            _children: {\n                value: new Set(),\n                enumerable: true\n            },\n            _subscribers: {\n                value: new Set(),\n                enumerable: true\n            },\n            _watchers: {\n                value: new Set(),\n                enumerable: true\n            },\n            _scheduler: {\n                value: createTOScheduler(),\n                enumerable: true\n            },\n            _getUserSettings: {\n                value: () => {\n                    const controlSettings = node.control.getSettings();\n                    return {\n                        ...ANIMATOR_DEFAULT_SETTINGS,\n                        ...filterProps(controlSettings),\n                        duration: {\n                            ...ANIMATOR_DEFAULT_SETTINGS.duration,\n                            ...(controlSettings.duration ? filterProps(controlSettings.duration) : null)\n                        }\n                    };\n                },\n                enumerable: true\n            },\n            _manager: {\n                value: manager,\n                enumerable: true,\n                writable: true\n            },\n            id: {\n                value: nodeId,\n                enumerable: true\n            },\n            state: {\n                get: () => machine.getState(),\n                enumerable: true\n            },\n            control: {\n                value: control,\n                enumerable: true\n            },\n            settings: {\n                get: () => {\n                    const settings = node._getUserSettings();\n                    let enter = settings.duration.enter;\n                    if (settings.combine) {\n                        const children = Array.from(node._children).filter((child) => {\n                            const { condition } = child.control.getSettings();\n                            return isNodeConditionCorrect(child, condition);\n                        });\n                        enter = node._manager.getDurationEnter(children);\n                    }\n                    return { ...settings, duration: { ...settings.duration, enter } };\n                },\n                enumerable: true\n            },\n            subscribe: {\n                value: (subscriber) => {\n                    node._subscribers.add(subscriber);\n                    subscriber(node);\n                    return () => node._subscribers.delete(subscriber);\n                },\n                enumerable: true\n            },\n            unsubscribe: {\n                value: (subscriber) => {\n                    node._subscribers.delete(subscriber);\n                },\n                enumerable: true\n            },\n            send: {\n                value: machine.send,\n                enumerable: true\n            }\n        };\n        Object.defineProperties(node, nodeProps);\n        if (parent) {\n            parent._children.add(node);\n        }\n        return node;\n    };\n    const removeNode = (node) => {\n        node._scheduler.stopAll();\n        for (const child of node._children) {\n            removeNode(child);\n        }\n        if (node._parent) {\n            node._parent._children.delete(node);\n        }\n        node._children.clear();\n        node._subscribers.clear();\n        node._watchers.clear();\n    };\n    const register = (parentNode, setup) => {\n        if (parentNode === undefined || parentNode === null) {\n            if (root) {\n                throw new Error('ARWES animator root node must be unregistered before registering another root node.');\n            }\n            root = createNode(undefined, setup);\n            return root;\n        }\n        if (!root) {\n            throw new Error('ARWES animator system requires an animator root node before registering children nodes. This means the provided animator parent node does not belong to the system.');\n        }\n        return createNode(parentNode, setup);\n    };\n    const unregister = (node) => {\n        if (!root) {\n            return;\n        }\n        for (const watcher of node._watchers) {\n            watcher(node);\n        }\n        removeNode(node);\n        if (root.id === node.id) {\n            root = undefined;\n        }\n    };\n    const system = {};\n    const systemProps = {\n        id: {\n            value: systemId,\n            enumerable: true\n        },\n        root: {\n            get: () => root,\n            enumerable: true\n        },\n        register: {\n            value: register,\n            enumerable: true\n        },\n        unregister: {\n            value: unregister,\n            enumerable: true\n        }\n    };\n    Object.defineProperties(system, systemProps);\n    return system;\n};\nexport { createAnimatorSystem };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}