{"ast":null,"code":"import { filterProps, randomizeList } from '@arwes/tools';\nimport { createAnimation } from '@arwes/animated';\nimport { walkTextNodes } from '../internal/walkTextNodes/index.js';\nimport { setTextNodesContent } from '../internal/setTextNodesContent/index.js';\nconst CIPHERED_CHARACTERS = '    ----____abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\nconst animateTextDecipher = props => {\n  const {\n    rootElement,\n    contentElement,\n    duration,\n    easing = 'linear',\n    isEntering = true,\n    hideOnExited = true,\n    hideOnEntered,\n    characters = CIPHERED_CHARACTERS\n  } = filterProps(props);\n  if (!rootElement || !contentElement) {\n    throw new Error('ARWES animateTextDecipher() requires valid DOM elements.');\n  }\n  const cloneElement = contentElement.cloneNode(true);\n  Object.assign(cloneElement.style, {\n    position: 'absolute',\n    inset: 0,\n    visibility: 'visible',\n    opacity: 1\n  });\n  const textNodes = [];\n  const textsReal = [];\n  walkTextNodes(cloneElement, child => {\n    textNodes.push(child);\n    textsReal.push(child.textContent || '');\n  });\n  const length = textsReal.join('').length;\n  const indexes = randomizeList(Array(length).fill(null).map((_, i) => i));\n  const deciphered = {};\n  rootElement.appendChild(cloneElement);\n  contentElement.style.visibility = 'hidden';\n  return createAnimation({\n    duration,\n    easing,\n    direction: isEntering ? 'normal' : 'reverse',\n    onUpdate: progress => {\n      const newPositionsLength = Math.round(length * progress);\n      for (let index = 0; index < length; index++) {\n        deciphered[indexes[index]] = index < newPositionsLength;\n      }\n      const textsCurrent = textsReal.map(text => text.split('').map((char, index) => {\n        if (char === ' ') return ' ';\n        if (deciphered[index]) return char;\n        return characters[Math.round(Math.random() * (characters.length - 1))];\n      }).join(''));\n      setTextNodesContent(textNodes, textsCurrent, length);\n    },\n    onFinish: () => {\n      contentElement.style.visibility = isEntering && hideOnEntered || !isEntering && hideOnExited ? 'hidden' : '';\n      cloneElement.remove();\n    },\n    onCancel: () => {\n      contentElement.style.visibility = '';\n      cloneElement.remove();\n    }\n  });\n};\nexport { animateTextDecipher };","map":{"version":3,"names":["filterProps","randomizeList","createAnimation","walkTextNodes","setTextNodesContent","CIPHERED_CHARACTERS","animateTextDecipher","props","rootElement","contentElement","duration","easing","isEntering","hideOnExited","hideOnEntered","characters","Error","cloneElement","cloneNode","Object","assign","style","position","inset","visibility","opacity","textNodes","textsReal","child","push","textContent","length","join","indexes","Array","fill","map","_","i","deciphered","appendChild","direction","onUpdate","progress","newPositionsLength","Math","round","index","textsCurrent","text","split","char","random","onFinish","remove","onCancel"],"sources":["/home/elisha-a/Nasa/client/node_modules/@arwes/text/build/esm/animateTextDecipher/animateTextDecipher.js"],"sourcesContent":["import { filterProps, randomizeList } from '@arwes/tools';\nimport { createAnimation } from '@arwes/animated';\nimport { walkTextNodes } from '../internal/walkTextNodes/index.js';\nimport { setTextNodesContent } from '../internal/setTextNodesContent/index.js';\nconst CIPHERED_CHARACTERS = '    ----____abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\nconst animateTextDecipher = (props) => {\n    const { rootElement, contentElement, duration, easing = 'linear', isEntering = true, hideOnExited = true, hideOnEntered, characters = CIPHERED_CHARACTERS } = filterProps(props);\n    if (!rootElement || !contentElement) {\n        throw new Error('ARWES animateTextDecipher() requires valid DOM elements.');\n    }\n    const cloneElement = contentElement.cloneNode(true);\n    Object.assign(cloneElement.style, {\n        position: 'absolute',\n        inset: 0,\n        visibility: 'visible',\n        opacity: 1\n    });\n    const textNodes = [];\n    const textsReal = [];\n    walkTextNodes(cloneElement, (child) => {\n        textNodes.push(child);\n        textsReal.push(child.textContent || '');\n    });\n    const length = textsReal.join('').length;\n    const indexes = randomizeList(Array(length)\n        .fill(null)\n        .map((_, i) => i));\n    const deciphered = {};\n    rootElement.appendChild(cloneElement);\n    contentElement.style.visibility = 'hidden';\n    return createAnimation({\n        duration,\n        easing,\n        direction: isEntering ? 'normal' : 'reverse',\n        onUpdate: (progress) => {\n            const newPositionsLength = Math.round(length * progress);\n            for (let index = 0; index < length; index++) {\n                deciphered[indexes[index]] = index < newPositionsLength;\n            }\n            const textsCurrent = textsReal.map((text) => text\n                .split('')\n                .map((char, index) => {\n                if (char === ' ')\n                    return ' ';\n                if (deciphered[index])\n                    return char;\n                return characters[Math.round(Math.random() * (characters.length - 1))];\n            })\n                .join(''));\n            setTextNodesContent(textNodes, textsCurrent, length);\n        },\n        onFinish: () => {\n            contentElement.style.visibility =\n                (isEntering && hideOnEntered) || (!isEntering && hideOnExited) ? 'hidden' : '';\n            cloneElement.remove();\n        },\n        onCancel: () => {\n            contentElement.style.visibility = '';\n            cloneElement.remove();\n        }\n    });\n};\nexport { animateTextDecipher };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}