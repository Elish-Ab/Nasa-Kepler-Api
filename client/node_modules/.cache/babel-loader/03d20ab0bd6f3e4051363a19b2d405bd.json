{"ast":null,"code":"import { filterProps } from '@arwes/tools';\nimport { BLEEPS_CATEGORIES } from '../constants.js';\nimport { createBleep } from '../createBleep/index.js';\nconst categoryNames = Object.keys(BLEEPS_CATEGORIES);\nconst createBleepsManager = propsInitials => {\n  const props = structuredClone(propsInitials);\n  const isBleepsAvailable = typeof window !== 'undefined' && !!window.AudioContext;\n  const context = isBleepsAvailable ? new window.AudioContext() : null;\n  const masterGain = isBleepsAvailable ? context.createGain() : null;\n  const bleepNames = new Set(Object.keys(props.bleeps));\n  const bleepsInternal = {};\n  const syncVolume = () => {\n    const globalVolume = Math.max(0, Math.min(1, props.master?.volume ?? 1));\n    masterGain.gain.setValueAtTime(globalVolume, context.currentTime);\n  };\n  const getBleepProps = bleepName => {\n    const bleepProps = props.bleeps[bleepName];\n    const category = bleepProps.category ?? props.common?.category;\n    const categoryProps = category ? props.categories?.[category] : null;\n    const generalProps = {\n      ...props.common,\n      ...categoryProps\n    };\n    return {\n      ...generalProps,\n      ...bleepProps,\n      context,\n      masterGain\n    };\n  };\n  const unload = () => {\n    if (!isBleepsAvailable) {\n      return;\n    }\n    bleepNames.forEach(bleepName => {\n      bleepsInternal[bleepName]?.unload();\n    });\n  };\n  const updateProps = newProps => {\n    if (newProps.master) {\n      props.master = {\n        ...props.master,\n        ...filterProps(newProps.master)\n      };\n    }\n    if (newProps.common) {\n      props.common = {\n        ...props.common,\n        ...filterProps(newProps.common)\n      };\n    }\n    const newCategoriesProps = newProps.categories;\n    if (newCategoriesProps) {\n      categoryNames.forEach(category => {\n        props.categories = props.categories ?? {};\n        props.categories[category] = {\n          ...props.categories?.[category],\n          ...newCategoriesProps[category]\n        };\n      });\n    }\n    const newBleepsProps = newProps.bleeps;\n    if (newBleepsProps) {\n      Object.keys(newBleepsProps).forEach(key => bleepNames.add(key));\n      bleepNames.forEach(bleepName => {\n        props.bleeps[bleepName] = {\n          ...props.bleeps[bleepName],\n          ...newBleepsProps[bleepName]\n        };\n      });\n    }\n  };\n  const updateBleeps = () => {\n    bleepNames.forEach(bleepName => {\n      const bleepProps = getBleepProps(bleepName);\n      if (bleepProps.disabled) {\n        const bleep = bleepsInternal[bleepName];\n        if (bleep) {\n          bleep.muted = true;\n          bleep.unload();\n        }\n        bleepsInternal[bleepName] = null;\n      } else {\n        const bleep = bleepsInternal[bleepName];\n        if (bleep) {\n          bleep.update(bleepProps);\n        } else {\n          bleepsInternal[bleepName] = createBleep(bleepProps);\n        }\n      }\n    });\n  };\n  const update = newProps => {\n    if (!isBleepsAvailable) {\n      return;\n    }\n    updateProps(newProps);\n    syncVolume();\n    updateBleeps();\n  };\n  if (isBleepsAvailable) {\n    masterGain.connect(context.destination);\n    syncVolume();\n    updateBleeps();\n  }\n  const bleeps = new Proxy(bleepsInternal, {\n    get(obj, key) {\n      const bleepName = key;\n      if (bleepNames.has(bleepName)) {\n        return obj[bleepName];\n      }\n      console.error(`ARWES bleeps manager bleep \"${bleepName}\" was not found and can not be played.`);\n      return null;\n    }\n  });\n  return Object.freeze({\n    bleeps,\n    unload,\n    update\n  });\n};\nexport { createBleepsManager };","map":{"version":3,"names":["filterProps","BLEEPS_CATEGORIES","createBleep","categoryNames","Object","keys","createBleepsManager","propsInitials","props","structuredClone","isBleepsAvailable","window","AudioContext","context","masterGain","createGain","bleepNames","Set","bleeps","bleepsInternal","syncVolume","globalVolume","Math","max","min","master","volume","gain","setValueAtTime","currentTime","getBleepProps","bleepName","bleepProps","category","common","categoryProps","categories","generalProps","unload","forEach","updateProps","newProps","newCategoriesProps","newBleepsProps","key","add","updateBleeps","disabled","bleep","muted","update","connect","destination","Proxy","get","obj","has","console","error","freeze"],"sources":["/home/elisha-a/Nasa/client/node_modules/@arwes/bleeps/build/esm/createBleepsManager/createBleepsManager.js"],"sourcesContent":["import { filterProps } from '@arwes/tools';\nimport { BLEEPS_CATEGORIES } from '../constants.js';\nimport { createBleep } from '../createBleep/index.js';\nconst categoryNames = Object.keys(BLEEPS_CATEGORIES);\nconst createBleepsManager = (propsInitials) => {\n    const props = structuredClone(propsInitials);\n    const isBleepsAvailable = typeof window !== 'undefined' && !!window.AudioContext;\n    const context = isBleepsAvailable ? new window.AudioContext() : null;\n    const masterGain = isBleepsAvailable ? context.createGain() : null;\n    const bleepNames = new Set(Object.keys(props.bleeps));\n    const bleepsInternal = {};\n    const syncVolume = () => {\n        const globalVolume = Math.max(0, Math.min(1, props.master?.volume ?? 1));\n        masterGain.gain.setValueAtTime(globalVolume, context.currentTime);\n    };\n    const getBleepProps = (bleepName) => {\n        const bleepProps = props.bleeps[bleepName];\n        const category = bleepProps.category ?? props.common?.category;\n        const categoryProps = category ? props.categories?.[category] : null;\n        const generalProps = { ...props.common, ...categoryProps };\n        return { ...generalProps, ...bleepProps, context, masterGain };\n    };\n    const unload = () => {\n        if (!isBleepsAvailable) {\n            return;\n        }\n        bleepNames.forEach((bleepName) => {\n            bleepsInternal[bleepName]?.unload();\n        });\n    };\n    const updateProps = (newProps) => {\n        if (newProps.master) {\n            props.master = { ...props.master, ...filterProps(newProps.master) };\n        }\n        if (newProps.common) {\n            props.common = { ...props.common, ...filterProps(newProps.common) };\n        }\n        const newCategoriesProps = newProps.categories;\n        if (newCategoriesProps) {\n            categoryNames.forEach((category) => {\n                props.categories = props.categories ?? {};\n                props.categories[category] = {\n                    ...props.categories?.[category],\n                    ...newCategoriesProps[category]\n                };\n            });\n        }\n        const newBleepsProps = newProps.bleeps;\n        if (newBleepsProps) {\n            Object.keys(newBleepsProps).forEach((key) => bleepNames.add(key));\n            bleepNames.forEach((bleepName) => {\n                props.bleeps[bleepName] = {\n                    ...props.bleeps[bleepName],\n                    ...newBleepsProps[bleepName]\n                };\n            });\n        }\n    };\n    const updateBleeps = () => {\n        bleepNames.forEach((bleepName) => {\n            const bleepProps = getBleepProps(bleepName);\n            if (bleepProps.disabled) {\n                const bleep = bleepsInternal[bleepName];\n                if (bleep) {\n                    bleep.muted = true;\n                    bleep.unload();\n                }\n                bleepsInternal[bleepName] = null;\n            }\n            else {\n                const bleep = bleepsInternal[bleepName];\n                if (bleep) {\n                    bleep.update(bleepProps);\n                }\n                else {\n                    bleepsInternal[bleepName] = createBleep(bleepProps);\n                }\n            }\n        });\n    };\n    const update = (newProps) => {\n        if (!isBleepsAvailable) {\n            return;\n        }\n        updateProps(newProps);\n        syncVolume();\n        updateBleeps();\n    };\n    if (isBleepsAvailable) {\n        masterGain.connect(context.destination);\n        syncVolume();\n        updateBleeps();\n    }\n    const bleeps = new Proxy(bleepsInternal, {\n        get(obj, key) {\n            const bleepName = key;\n            if (bleepNames.has(bleepName)) {\n                return obj[bleepName];\n            }\n            console.error(`ARWES bleeps manager bleep \"${bleepName}\" was not found and can not be played.`);\n            return null;\n        }\n    });\n    return Object.freeze({ bleeps, unload, update });\n};\nexport { createBleepsManager };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}