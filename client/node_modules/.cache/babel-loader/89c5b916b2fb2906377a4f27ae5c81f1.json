{"ast":null,"code":"import { easing, createAnimation } from '@arwes/animated';\nimport { getDistanceFromOriginToCornerProgress } from './getDistanceFromOriginToCornerProgress.js';\nconst defaultProps = {\n  color: '#777',\n  type: 'box',\n  distance: 30,\n  size: 4,\n  crossSize: 1,\n  origin: 'center',\n  originInverted: false,\n  easing: easing.inSine\n};\nconst createBackgroundDots = props => {\n  const {\n    canvas,\n    animator\n  } = props;\n  const ctx = canvas.getContext('2d');\n  if (!ctx) {\n    return {\n      cancel: () => {}\n    };\n  }\n  const dpr = Math.min(window.devicePixelRatio || 2, 2);\n  let transitionControl;\n  let resizeObserver;\n  let unsubscribe;\n  const getSettings = () => ({\n    ...defaultProps,\n    ...props.settingsRef.current\n  });\n  const resize = () => {\n    const {\n      width,\n      height\n    } = canvas.getBoundingClientRect();\n    if (canvas.width !== width * dpr || canvas.height !== height * dpr) {\n      canvas.width = width * dpr;\n      canvas.height = height * dpr;\n    }\n    ctx.setTransform(1, 0, 0, 1, 0, 0);\n    ctx.scale(dpr, dpr);\n  };\n  const draw = (isEntering, progress) => {\n    if (!ctx) {\n      return;\n    }\n    const {\n      color,\n      type,\n      distance,\n      size,\n      crossSize,\n      origin,\n      originInverted\n    } = getSettings();\n    const {\n      width,\n      height\n    } = canvas;\n    const xLength = 1 + Math.floor(width / distance);\n    const yLength = 1 + Math.floor(height / distance);\n    const xMargin = width % distance;\n    const yMargin = height % distance;\n    ctx.clearRect(0, 0, width, height);\n    for (let xIndex = 0; xIndex < xLength; xIndex++) {\n      const x = xMargin / 2 + xIndex * distance;\n      for (let yIndex = 0; yIndex < yLength; yIndex++) {\n        const y = yMargin / 2 + yIndex * distance;\n        const distanceFromOriginProgress = getDistanceFromOriginToCornerProgress(width / dpr, height / dpr, x, y, origin);\n        const distancePercentage = isEntering && originInverted || !isEntering && !originInverted ? 1 - distanceFromOriginProgress : distanceFromOriginProgress;\n        const alphaProgress = progress / distancePercentage;\n        const alpha = Math.max(0, Math.min(1, alphaProgress));\n        ctx.beginPath();\n        ctx.globalAlpha = isEntering ? alpha : 1 - alpha;\n        if (type === 'circle') {\n          ctx.arc(x, y, size, 0, 2 * Math.PI);\n        } else if (type === 'cross') {\n          const l = size / 2;\n          const b = crossSize / 2;\n          ctx.moveTo(x - l, y + b);\n          ctx.lineTo(x - l, y - b);\n          ctx.lineTo(x - b, y - b);\n          ctx.lineTo(x - b, y - l);\n          ctx.lineTo(x + b, y - l);\n          ctx.lineTo(x + b, y - b);\n          ctx.lineTo(x + l, y - b);\n          ctx.lineTo(x + l, y + b);\n          ctx.lineTo(x + b, y + b);\n          ctx.lineTo(x + b, y + l);\n          ctx.lineTo(x - b, y + l);\n          ctx.lineTo(x - b, y + b);\n        } else {\n          ctx.rect(x - size / 2, y - size / 2, size, size);\n        }\n        ctx.fillStyle = color;\n        ctx.fill();\n        ctx.closePath();\n      }\n    }\n  };\n  const setup = () => {\n    canvas.style.opacity = '1';\n    if (typeof window !== 'undefined' && !resizeObserver) {\n      resizeObserver = new window.ResizeObserver(() => {\n        resize();\n        if (animator) {\n          switch (animator.state) {\n            case 'entered':\n              {\n                draw(true, 1);\n                break;\n              }\n          }\n        } else {\n          draw(true, 1);\n        }\n      });\n      resizeObserver.observe(canvas);\n      resize();\n    }\n  };\n  const stop = () => {\n    canvas.style.opacity = '0';\n    resizeObserver?.disconnect();\n    resizeObserver = undefined;\n    transitionControl?.cancel();\n    transitionControl = undefined;\n  };\n  const start = () => {\n    if (!animator) {\n      setup();\n      draw(true, 1);\n      return;\n    }\n    unsubscribe = animator.subscribe(node => {\n      const settings = getSettings();\n      switch (node.state) {\n        case 'entering':\n          {\n            setup();\n            transitionControl?.cancel();\n            transitionControl = createAnimation({\n              duration: node.settings.duration.enter,\n              easing: settings.easing,\n              onUpdate(progress) {\n                draw(true, progress);\n              }\n            });\n            break;\n          }\n        case 'entered':\n          {\n            setup();\n            transitionControl?.cancel();\n            draw(true, 1);\n            break;\n          }\n        case 'exiting':\n          {\n            setup();\n            transitionControl?.cancel();\n            transitionControl = createAnimation({\n              duration: node.settings.duration.exit,\n              easing: settings.easing,\n              onUpdate(progress) {\n                draw(false, progress);\n              }\n            });\n            break;\n          }\n        case 'exited':\n          {\n            stop();\n            break;\n          }\n      }\n    });\n  };\n  const cancel = () => {\n    unsubscribe?.();\n    stop();\n  };\n  start();\n  return Object.freeze({\n    cancel\n  });\n};\nexport { createBackgroundDots };","map":{"version":3,"names":["easing","createAnimation","getDistanceFromOriginToCornerProgress","defaultProps","color","type","distance","size","crossSize","origin","originInverted","inSine","createBackgroundDots","props","canvas","animator","ctx","getContext","cancel","dpr","Math","min","window","devicePixelRatio","transitionControl","resizeObserver","unsubscribe","getSettings","settingsRef","current","resize","width","height","getBoundingClientRect","setTransform","scale","draw","isEntering","progress","xLength","floor","yLength","xMargin","yMargin","clearRect","xIndex","x","yIndex","y","distanceFromOriginProgress","distancePercentage","alphaProgress","alpha","max","beginPath","globalAlpha","arc","PI","l","b","moveTo","lineTo","rect","fillStyle","fill","closePath","setup","style","opacity","ResizeObserver","state","observe","stop","disconnect","undefined","start","subscribe","node","settings","duration","enter","onUpdate","exit","Object","freeze"],"sources":["/home/elisha-a/Nasa/client/node_modules/@arwes/bgs/build/esm/createBackgroundDots/createBackgroundDots.js"],"sourcesContent":["import { easing, createAnimation } from '@arwes/animated';\nimport { getDistanceFromOriginToCornerProgress } from './getDistanceFromOriginToCornerProgress.js';\nconst defaultProps = {\n    color: '#777',\n    type: 'box',\n    distance: 30,\n    size: 4,\n    crossSize: 1,\n    origin: 'center',\n    originInverted: false,\n    easing: easing.inSine\n};\nconst createBackgroundDots = (props) => {\n    const { canvas, animator } = props;\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n        return { cancel: () => { } };\n    }\n    const dpr = Math.min(window.devicePixelRatio || 2, 2);\n    let transitionControl;\n    let resizeObserver;\n    let unsubscribe;\n    const getSettings = () => ({\n        ...defaultProps,\n        ...props.settingsRef.current\n    });\n    const resize = () => {\n        const { width, height } = canvas.getBoundingClientRect();\n        if (canvas.width !== width * dpr || canvas.height !== height * dpr) {\n            canvas.width = width * dpr;\n            canvas.height = height * dpr;\n        }\n        ctx.setTransform(1, 0, 0, 1, 0, 0);\n        ctx.scale(dpr, dpr);\n    };\n    const draw = (isEntering, progress) => {\n        if (!ctx) {\n            return;\n        }\n        const { color, type, distance, size, crossSize, origin, originInverted } = getSettings();\n        const { width, height } = canvas;\n        const xLength = 1 + Math.floor(width / distance);\n        const yLength = 1 + Math.floor(height / distance);\n        const xMargin = width % distance;\n        const yMargin = height % distance;\n        ctx.clearRect(0, 0, width, height);\n        for (let xIndex = 0; xIndex < xLength; xIndex++) {\n            const x = xMargin / 2 + xIndex * distance;\n            for (let yIndex = 0; yIndex < yLength; yIndex++) {\n                const y = yMargin / 2 + yIndex * distance;\n                const distanceFromOriginProgress = getDistanceFromOriginToCornerProgress(width / dpr, height / dpr, x, y, origin);\n                const distancePercentage = (isEntering && originInverted) || (!isEntering && !originInverted)\n                    ? 1 - distanceFromOriginProgress\n                    : distanceFromOriginProgress;\n                const alphaProgress = progress / distancePercentage;\n                const alpha = Math.max(0, Math.min(1, alphaProgress));\n                ctx.beginPath();\n                ctx.globalAlpha = isEntering ? alpha : 1 - alpha;\n                if (type === 'circle') {\n                    ctx.arc(x, y, size, 0, 2 * Math.PI);\n                }\n                else if (type === 'cross') {\n                    const l = size / 2;\n                    const b = crossSize / 2;\n                    ctx.moveTo(x - l, y + b);\n                    ctx.lineTo(x - l, y - b);\n                    ctx.lineTo(x - b, y - b);\n                    ctx.lineTo(x - b, y - l);\n                    ctx.lineTo(x + b, y - l);\n                    ctx.lineTo(x + b, y - b);\n                    ctx.lineTo(x + l, y - b);\n                    ctx.lineTo(x + l, y + b);\n                    ctx.lineTo(x + b, y + b);\n                    ctx.lineTo(x + b, y + l);\n                    ctx.lineTo(x - b, y + l);\n                    ctx.lineTo(x - b, y + b);\n                }\n                else {\n                    ctx.rect(x - size / 2, y - size / 2, size, size);\n                }\n                ctx.fillStyle = color;\n                ctx.fill();\n                ctx.closePath();\n            }\n        }\n    };\n    const setup = () => {\n        canvas.style.opacity = '1';\n        if (typeof window !== 'undefined' && !resizeObserver) {\n            resizeObserver = new window.ResizeObserver(() => {\n                resize();\n                if (animator) {\n                    switch (animator.state) {\n                        case 'entered': {\n                            draw(true, 1);\n                            break;\n                        }\n                    }\n                }\n                else {\n                    draw(true, 1);\n                }\n            });\n            resizeObserver.observe(canvas);\n            resize();\n        }\n    };\n    const stop = () => {\n        canvas.style.opacity = '0';\n        resizeObserver?.disconnect();\n        resizeObserver = undefined;\n        transitionControl?.cancel();\n        transitionControl = undefined;\n    };\n    const start = () => {\n        if (!animator) {\n            setup();\n            draw(true, 1);\n            return;\n        }\n        unsubscribe = animator.subscribe((node) => {\n            const settings = getSettings();\n            switch (node.state) {\n                case 'entering': {\n                    setup();\n                    transitionControl?.cancel();\n                    transitionControl = createAnimation({\n                        duration: node.settings.duration.enter,\n                        easing: settings.easing,\n                        onUpdate(progress) {\n                            draw(true, progress);\n                        }\n                    });\n                    break;\n                }\n                case 'entered': {\n                    setup();\n                    transitionControl?.cancel();\n                    draw(true, 1);\n                    break;\n                }\n                case 'exiting': {\n                    setup();\n                    transitionControl?.cancel();\n                    transitionControl = createAnimation({\n                        duration: node.settings.duration.exit,\n                        easing: settings.easing,\n                        onUpdate(progress) {\n                            draw(false, progress);\n                        }\n                    });\n                    break;\n                }\n                case 'exited': {\n                    stop();\n                    break;\n                }\n            }\n        });\n    };\n    const cancel = () => {\n        unsubscribe?.();\n        stop();\n    };\n    start();\n    return Object.freeze({ cancel });\n};\nexport { createBackgroundDots };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}