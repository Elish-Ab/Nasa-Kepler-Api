{"ast":null,"code":"const setTextNodesContent = (textNodes, texts, contentLength, onCurrentNode) => {\n  let markerLength = 0;\n  for (let index = 0; index < textNodes.length; index++) {\n    const textNode = textNodes[index];\n    const text = texts[index];\n    const newMarkerLength = markerLength + text.length;\n    if (newMarkerLength <= contentLength) {\n      if (textNode.textContent !== text) {\n        textNode.textContent = text;\n      }\n      if (newMarkerLength === contentLength) {\n        onCurrentNode?.(textNode);\n      }\n    } else if (markerLength < contentLength) {\n      const currentTextNodeLengthPortion = contentLength - markerLength;\n      const currentTextNodeText = text.substring(0, currentTextNodeLengthPortion);\n      if (textNode.textContent !== currentTextNodeText) {\n        textNode.textContent = currentTextNodeText;\n      }\n      onCurrentNode?.(textNode);\n    } else {\n      if (textNode.textContent !== '') {\n        textNode.textContent = '';\n      }\n      if (contentLength === 0 && index === 0) {\n        onCurrentNode?.(textNode);\n      }\n    }\n    markerLength = newMarkerLength;\n  }\n};\nexport { setTextNodesContent };","map":{"version":3,"names":["setTextNodesContent","textNodes","texts","contentLength","onCurrentNode","markerLength","index","length","textNode","text","newMarkerLength","textContent","currentTextNodeLengthPortion","currentTextNodeText","substring"],"sources":["/home/elisha-a/Nasa/client/node_modules/@arwes/text/build/esm/internal/setTextNodesContent/setTextNodesContent.js"],"sourcesContent":["const setTextNodesContent = (textNodes, texts, contentLength, onCurrentNode) => {\n    let markerLength = 0;\n    for (let index = 0; index < textNodes.length; index++) {\n        const textNode = textNodes[index];\n        const text = texts[index];\n        const newMarkerLength = markerLength + text.length;\n        if (newMarkerLength <= contentLength) {\n            if (textNode.textContent !== text) {\n                textNode.textContent = text;\n            }\n            if (newMarkerLength === contentLength) {\n                onCurrentNode?.(textNode);\n            }\n        }\n        else if (markerLength < contentLength) {\n            const currentTextNodeLengthPortion = contentLength - markerLength;\n            const currentTextNodeText = text.substring(0, currentTextNodeLengthPortion);\n            if (textNode.textContent !== currentTextNodeText) {\n                textNode.textContent = currentTextNodeText;\n            }\n            onCurrentNode?.(textNode);\n        }\n        else {\n            if (textNode.textContent !== '') {\n                textNode.textContent = '';\n            }\n            if (contentLength === 0 && index === 0) {\n                onCurrentNode?.(textNode);\n            }\n        }\n        markerLength = newMarkerLength;\n    }\n};\nexport { setTextNodesContent };\n"],"mappings":"AAAA,MAAMA,mBAAmB,GAAGA,CAACC,SAAS,EAAEC,KAAK,EAAEC,aAAa,EAAEC,aAAa,KAAK;EAC5E,IAAIC,YAAY,GAAG,CAAC;EACpB,KAAK,IAAIC,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAGL,SAAS,CAACM,MAAM,EAAED,KAAK,EAAE,EAAE;IACnD,MAAME,QAAQ,GAAGP,SAAS,CAACK,KAAK,CAAC;IACjC,MAAMG,IAAI,GAAGP,KAAK,CAACI,KAAK,CAAC;IACzB,MAAMI,eAAe,GAAGL,YAAY,GAAGI,IAAI,CAACF,MAAM;IAClD,IAAIG,eAAe,IAAIP,aAAa,EAAE;MAClC,IAAIK,QAAQ,CAACG,WAAW,KAAKF,IAAI,EAAE;QAC/BD,QAAQ,CAACG,WAAW,GAAGF,IAAI;MAC/B;MACA,IAAIC,eAAe,KAAKP,aAAa,EAAE;QACnCC,aAAa,GAAGI,QAAQ,CAAC;MAC7B;IACJ,CAAC,MACI,IAAIH,YAAY,GAAGF,aAAa,EAAE;MACnC,MAAMS,4BAA4B,GAAGT,aAAa,GAAGE,YAAY;MACjE,MAAMQ,mBAAmB,GAAGJ,IAAI,CAACK,SAAS,CAAC,CAAC,EAAEF,4BAA4B,CAAC;MAC3E,IAAIJ,QAAQ,CAACG,WAAW,KAAKE,mBAAmB,EAAE;QAC9CL,QAAQ,CAACG,WAAW,GAAGE,mBAAmB;MAC9C;MACAT,aAAa,GAAGI,QAAQ,CAAC;IAC7B,CAAC,MACI;MACD,IAAIA,QAAQ,CAACG,WAAW,KAAK,EAAE,EAAE;QAC7BH,QAAQ,CAACG,WAAW,GAAG,EAAE;MAC7B;MACA,IAAIR,aAAa,KAAK,CAAC,IAAIG,KAAK,KAAK,CAAC,EAAE;QACpCF,aAAa,GAAGI,QAAQ,CAAC;MAC7B;IACJ;IACAH,YAAY,GAAGK,eAAe;EAClC;AACJ,CAAC;AACD,SAASV,mBAAmB","ignoreList":[]},"metadata":{},"sourceType":"module"}