{"ast":null,"code":"const minMax = (min, max) => value => Math.min(max, Math.max(min, value));\nconst minMax0to100 = minMax(0, 100);\nconst minMax0to230 = minMax(0, 230);\nconst minMax0to360 = minMax(0, 360);\nconst minMax0to1 = minMax(0, 1);\nconst searchRegExp = (string, regexp) => {\n  const result = string.match(regexp);\n  if (Array.isArray(result)) {\n    return String(result[0]);\n  }\n  return null;\n};\nconst colorOptionsDefault = {};\nconst fromArrayToHSL = (src, options = colorOptionsDefault) => {\n  const [hue, saturation, lightness, alpha = 1] = src;\n  const {\n    alpha: alphaOverwrite = 1\n  } = options;\n  const h = minMax0to360(hue);\n  const s = minMax0to100(saturation);\n  const l = minMax0to100(lightness);\n  const a = minMax0to1(alpha) * minMax0to1(alphaOverwrite);\n  return `hsl(${h},${s}%,${l}%,${a})`;\n};\nconst fromArrayToRGB = (src, options = colorOptionsDefault) => {\n  const [red, green, blue, alpha = 1] = src;\n  const {\n    alpha: alphaOverwrite = 1\n  } = options;\n  const r = minMax0to100(red);\n  const g = minMax0to100(green);\n  const b = minMax0to100(blue);\n  const a = minMax0to1(alpha) * minMax0to1(alphaOverwrite);\n  return `rgb(${r}%,${g}%,${b}%,${a})`;\n};\nconst fromArrayToLCH = (src, options = colorOptionsDefault) => {\n  const [light, chroma, hue, alpha = 1] = src;\n  const {\n    alpha: alphaOverwrite = 1\n  } = options;\n  const l = minMax0to100(light);\n  const c = minMax0to230(chroma);\n  const h = minMax0to360(hue);\n  const a = minMax0to1(alpha) * minMax0to1(alphaOverwrite);\n  return `lch(${l} ${c} ${h} / ${a})`;\n};\nconst fromArrayToHWB = (src, options = colorOptionsDefault) => {\n  const [hue, whiteness, blackness, alpha = 1] = src;\n  const {\n    alpha: alphaOverwrite = 1\n  } = options;\n  const h = minMax0to360(hue);\n  const w = minMax0to100(whiteness);\n  const b = minMax0to100(blackness);\n  const a = minMax0to1(alpha) * minMax0to1(alphaOverwrite);\n  return `hwb(${h} ${w}% ${b}% / ${a})`;\n};\nconst formatColor = (color, options = colorOptionsDefault) => {\n  const {\n    alpha\n  } = options;\n  if (alpha === undefined || alpha === null) {\n    return color;\n  }\n  if (!/^(hsla?|rgba?|lch|hwb)\\([a-zA-Z0-9,./% -]+\\)$/.test(color)) {\n    return color;\n  }\n  const separators = Array.from(color.matchAll(/(,\\s?|\\s?\\/\\s?|\\s)/g));\n  const hasCurrentAlpha = separators.length === 3;\n  const isCommaSeparated = color.includes(',');\n  const alphaAdjust = minMax0to1(alpha);\n  if (hasCurrentAlpha) {\n    const alphaCurrentMatch = searchRegExp(color, /\\d+(\\.\\d+)?%?\\)$/);\n    const isPercentage = alphaCurrentMatch.includes('%');\n    let alphaCurrent = Number(alphaCurrentMatch.replace(/%?\\)$/g, ''));\n    alphaCurrent = isPercentage ? minMax0to100(alphaCurrent) : minMax0to1(alphaCurrent);\n    return color.replace(/\\d+(\\.\\d+)?%?\\)$/, `${alphaCurrent * alphaAdjust}${isPercentage ? '%' : ''})`);\n  }\n  return color.replace(/\\)$/, isCommaSeparated ? `,${alphaAdjust})` : ` / ${alphaAdjust})`);\n};\nconst createThemeColorBySeries = (name, series) => (indexProvided, options) => {\n  if (!series.length) {\n    return '';\n  }\n  const index = Math.round(indexProvided);\n  const color = series[index > series.length - 1 ? series.length - 1 : index];\n  if (typeof color === 'string') {\n    return formatColor(color, options);\n  }\n  if (name === 'rgb') {\n    return fromArrayToRGB(color, options);\n  }\n  if (name === 'lch') {\n    return fromArrayToLCH(color, options);\n  }\n  if (name === 'hwb') {\n    return fromArrayToHWB(color, options);\n  }\n  return fromArrayToHSL(color, options);\n};\nconst createThemeColorByFunction = (name, create) => (indexProvided, options) => {\n  const index = Math.round(indexProvided);\n  const color = create(index);\n  if (typeof color === 'string') {\n    return formatColor(color, options);\n  }\n  if (name === 'rgb') {\n    return fromArrayToRGB(color, options);\n  }\n  if (name === 'lch') {\n    return fromArrayToLCH(color, options);\n  }\n  if (name === 'hwb') {\n    return fromArrayToHWB(color, options);\n  }\n  return fromArrayToHSL(color, options);\n};\nconst createThemeColor = settings => {\n  if (Array.isArray(settings)) {\n    return createThemeColorBySeries('hsl', settings);\n  }\n  if (typeof settings === 'function') {\n    return createThemeColorByFunction('hsl', settings);\n  }\n  if (Array.isArray(settings.list)) {\n    return createThemeColorBySeries(settings.color, settings.list);\n  }\n  const createColor = settings.create;\n  if (typeof createColor !== 'function') {\n    throw new Error('ARWES createThemeColor requires a valid list of colors or a color creator.');\n  }\n  return createThemeColorByFunction(settings.color, createColor);\n};\nexport { createThemeColor };","map":{"version":3,"names":["minMax","min","max","value","Math","minMax0to100","minMax0to230","minMax0to360","minMax0to1","searchRegExp","string","regexp","result","match","Array","isArray","String","colorOptionsDefault","fromArrayToHSL","src","options","hue","saturation","lightness","alpha","alphaOverwrite","h","s","l","a","fromArrayToRGB","red","green","blue","r","g","b","fromArrayToLCH","light","chroma","c","fromArrayToHWB","whiteness","blackness","w","formatColor","color","undefined","test","separators","from","matchAll","hasCurrentAlpha","length","isCommaSeparated","includes","alphaAdjust","alphaCurrentMatch","isPercentage","alphaCurrent","Number","replace","createThemeColorBySeries","name","series","indexProvided","index","round","createThemeColorByFunction","create","createThemeColor","settings","list","createColor","Error"],"sources":["/home/elisha-a/Nasa/client/node_modules/@arwes/theme/build/esm/createThemeColor/createThemeColor.js"],"sourcesContent":["const minMax = (min, max) => (value) => Math.min(max, Math.max(min, value));\nconst minMax0to100 = minMax(0, 100);\nconst minMax0to230 = minMax(0, 230);\nconst minMax0to360 = minMax(0, 360);\nconst minMax0to1 = minMax(0, 1);\nconst searchRegExp = (string, regexp) => {\n    const result = string.match(regexp);\n    if (Array.isArray(result)) {\n        return String(result[0]);\n    }\n    return null;\n};\nconst colorOptionsDefault = {};\nconst fromArrayToHSL = (src, options = colorOptionsDefault) => {\n    const [hue, saturation, lightness, alpha = 1] = src;\n    const { alpha: alphaOverwrite = 1 } = options;\n    const h = minMax0to360(hue);\n    const s = minMax0to100(saturation);\n    const l = minMax0to100(lightness);\n    const a = minMax0to1(alpha) * minMax0to1(alphaOverwrite);\n    return `hsl(${h},${s}%,${l}%,${a})`;\n};\nconst fromArrayToRGB = (src, options = colorOptionsDefault) => {\n    const [red, green, blue, alpha = 1] = src;\n    const { alpha: alphaOverwrite = 1 } = options;\n    const r = minMax0to100(red);\n    const g = minMax0to100(green);\n    const b = minMax0to100(blue);\n    const a = minMax0to1(alpha) * minMax0to1(alphaOverwrite);\n    return `rgb(${r}%,${g}%,${b}%,${a})`;\n};\nconst fromArrayToLCH = (src, options = colorOptionsDefault) => {\n    const [light, chroma, hue, alpha = 1] = src;\n    const { alpha: alphaOverwrite = 1 } = options;\n    const l = minMax0to100(light);\n    const c = minMax0to230(chroma);\n    const h = minMax0to360(hue);\n    const a = minMax0to1(alpha) * minMax0to1(alphaOverwrite);\n    return `lch(${l} ${c} ${h} / ${a})`;\n};\nconst fromArrayToHWB = (src, options = colorOptionsDefault) => {\n    const [hue, whiteness, blackness, alpha = 1] = src;\n    const { alpha: alphaOverwrite = 1 } = options;\n    const h = minMax0to360(hue);\n    const w = minMax0to100(whiteness);\n    const b = minMax0to100(blackness);\n    const a = minMax0to1(alpha) * minMax0to1(alphaOverwrite);\n    return `hwb(${h} ${w}% ${b}% / ${a})`;\n};\nconst formatColor = (color, options = colorOptionsDefault) => {\n    const { alpha } = options;\n    if (alpha === undefined || alpha === null) {\n        return color;\n    }\n    if (!/^(hsla?|rgba?|lch|hwb)\\([a-zA-Z0-9,./% -]+\\)$/.test(color)) {\n        return color;\n    }\n    const separators = Array.from(color.matchAll(/(,\\s?|\\s?\\/\\s?|\\s)/g));\n    const hasCurrentAlpha = separators.length === 3;\n    const isCommaSeparated = color.includes(',');\n    const alphaAdjust = minMax0to1(alpha);\n    if (hasCurrentAlpha) {\n        const alphaCurrentMatch = searchRegExp(color, /\\d+(\\.\\d+)?%?\\)$/);\n        const isPercentage = alphaCurrentMatch.includes('%');\n        let alphaCurrent = Number(alphaCurrentMatch.replace(/%?\\)$/g, ''));\n        alphaCurrent = isPercentage ? minMax0to100(alphaCurrent) : minMax0to1(alphaCurrent);\n        return color.replace(/\\d+(\\.\\d+)?%?\\)$/, `${alphaCurrent * alphaAdjust}${isPercentage ? '%' : ''})`);\n    }\n    return color.replace(/\\)$/, isCommaSeparated ? `,${alphaAdjust})` : ` / ${alphaAdjust})`);\n};\nconst createThemeColorBySeries = (name, series) => (indexProvided, options) => {\n    if (!series.length) {\n        return '';\n    }\n    const index = Math.round(indexProvided);\n    const color = series[index > series.length - 1 ? series.length - 1 : index];\n    if (typeof color === 'string') {\n        return formatColor(color, options);\n    }\n    if (name === 'rgb') {\n        return fromArrayToRGB(color, options);\n    }\n    if (name === 'lch') {\n        return fromArrayToLCH(color, options);\n    }\n    if (name === 'hwb') {\n        return fromArrayToHWB(color, options);\n    }\n    return fromArrayToHSL(color, options);\n};\nconst createThemeColorByFunction = (name, create) => (indexProvided, options) => {\n    const index = Math.round(indexProvided);\n    const color = create(index);\n    if (typeof color === 'string') {\n        return formatColor(color, options);\n    }\n    if (name === 'rgb') {\n        return fromArrayToRGB(color, options);\n    }\n    if (name === 'lch') {\n        return fromArrayToLCH(color, options);\n    }\n    if (name === 'hwb') {\n        return fromArrayToHWB(color, options);\n    }\n    return fromArrayToHSL(color, options);\n};\nconst createThemeColor = (settings) => {\n    if (Array.isArray(settings)) {\n        return createThemeColorBySeries('hsl', settings);\n    }\n    if (typeof settings === 'function') {\n        return createThemeColorByFunction('hsl', settings);\n    }\n    if (Array.isArray(settings.list)) {\n        return createThemeColorBySeries(settings.color, settings.list);\n    }\n    const createColor = settings.create;\n    if (typeof createColor !== 'function') {\n        throw new Error('ARWES createThemeColor requires a valid list of colors or a color creator.');\n    }\n    return createThemeColorByFunction(settings.color, createColor);\n};\nexport { createThemeColor };\n"],"mappings":"AAAA,MAAMA,MAAM,GAAGA,CAACC,GAAG,EAAEC,GAAG,KAAMC,KAAK,IAAKC,IAAI,CAACH,GAAG,CAACC,GAAG,EAAEE,IAAI,CAACF,GAAG,CAACD,GAAG,EAAEE,KAAK,CAAC,CAAC;AAC3E,MAAME,YAAY,GAAGL,MAAM,CAAC,CAAC,EAAE,GAAG,CAAC;AACnC,MAAMM,YAAY,GAAGN,MAAM,CAAC,CAAC,EAAE,GAAG,CAAC;AACnC,MAAMO,YAAY,GAAGP,MAAM,CAAC,CAAC,EAAE,GAAG,CAAC;AACnC,MAAMQ,UAAU,GAAGR,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;AAC/B,MAAMS,YAAY,GAAGA,CAACC,MAAM,EAAEC,MAAM,KAAK;EACrC,MAAMC,MAAM,GAAGF,MAAM,CAACG,KAAK,CAACF,MAAM,CAAC;EACnC,IAAIG,KAAK,CAACC,OAAO,CAACH,MAAM,CAAC,EAAE;IACvB,OAAOI,MAAM,CAACJ,MAAM,CAAC,CAAC,CAAC,CAAC;EAC5B;EACA,OAAO,IAAI;AACf,CAAC;AACD,MAAMK,mBAAmB,GAAG,CAAC,CAAC;AAC9B,MAAMC,cAAc,GAAGA,CAACC,GAAG,EAAEC,OAAO,GAAGH,mBAAmB,KAAK;EAC3D,MAAM,CAACI,GAAG,EAAEC,UAAU,EAAEC,SAAS,EAAEC,KAAK,GAAG,CAAC,CAAC,GAAGL,GAAG;EACnD,MAAM;IAAEK,KAAK,EAAEC,cAAc,GAAG;EAAE,CAAC,GAAGL,OAAO;EAC7C,MAAMM,CAAC,GAAGnB,YAAY,CAACc,GAAG,CAAC;EAC3B,MAAMM,CAAC,GAAGtB,YAAY,CAACiB,UAAU,CAAC;EAClC,MAAMM,CAAC,GAAGvB,YAAY,CAACkB,SAAS,CAAC;EACjC,MAAMM,CAAC,GAAGrB,UAAU,CAACgB,KAAK,CAAC,GAAGhB,UAAU,CAACiB,cAAc,CAAC;EACxD,OAAO,OAAOC,CAAC,IAAIC,CAAC,KAAKC,CAAC,KAAKC,CAAC,GAAG;AACvC,CAAC;AACD,MAAMC,cAAc,GAAGA,CAACX,GAAG,EAAEC,OAAO,GAAGH,mBAAmB,KAAK;EAC3D,MAAM,CAACc,GAAG,EAAEC,KAAK,EAAEC,IAAI,EAAET,KAAK,GAAG,CAAC,CAAC,GAAGL,GAAG;EACzC,MAAM;IAAEK,KAAK,EAAEC,cAAc,GAAG;EAAE,CAAC,GAAGL,OAAO;EAC7C,MAAMc,CAAC,GAAG7B,YAAY,CAAC0B,GAAG,CAAC;EAC3B,MAAMI,CAAC,GAAG9B,YAAY,CAAC2B,KAAK,CAAC;EAC7B,MAAMI,CAAC,GAAG/B,YAAY,CAAC4B,IAAI,CAAC;EAC5B,MAAMJ,CAAC,GAAGrB,UAAU,CAACgB,KAAK,CAAC,GAAGhB,UAAU,CAACiB,cAAc,CAAC;EACxD,OAAO,OAAOS,CAAC,KAAKC,CAAC,KAAKC,CAAC,KAAKP,CAAC,GAAG;AACxC,CAAC;AACD,MAAMQ,cAAc,GAAGA,CAAClB,GAAG,EAAEC,OAAO,GAAGH,mBAAmB,KAAK;EAC3D,MAAM,CAACqB,KAAK,EAAEC,MAAM,EAAElB,GAAG,EAAEG,KAAK,GAAG,CAAC,CAAC,GAAGL,GAAG;EAC3C,MAAM;IAAEK,KAAK,EAAEC,cAAc,GAAG;EAAE,CAAC,GAAGL,OAAO;EAC7C,MAAMQ,CAAC,GAAGvB,YAAY,CAACiC,KAAK,CAAC;EAC7B,MAAME,CAAC,GAAGlC,YAAY,CAACiC,MAAM,CAAC;EAC9B,MAAMb,CAAC,GAAGnB,YAAY,CAACc,GAAG,CAAC;EAC3B,MAAMQ,CAAC,GAAGrB,UAAU,CAACgB,KAAK,CAAC,GAAGhB,UAAU,CAACiB,cAAc,CAAC;EACxD,OAAO,OAAOG,CAAC,IAAIY,CAAC,IAAId,CAAC,MAAMG,CAAC,GAAG;AACvC,CAAC;AACD,MAAMY,cAAc,GAAGA,CAACtB,GAAG,EAAEC,OAAO,GAAGH,mBAAmB,KAAK;EAC3D,MAAM,CAACI,GAAG,EAAEqB,SAAS,EAAEC,SAAS,EAAEnB,KAAK,GAAG,CAAC,CAAC,GAAGL,GAAG;EAClD,MAAM;IAAEK,KAAK,EAAEC,cAAc,GAAG;EAAE,CAAC,GAAGL,OAAO;EAC7C,MAAMM,CAAC,GAAGnB,YAAY,CAACc,GAAG,CAAC;EAC3B,MAAMuB,CAAC,GAAGvC,YAAY,CAACqC,SAAS,CAAC;EACjC,MAAMN,CAAC,GAAG/B,YAAY,CAACsC,SAAS,CAAC;EACjC,MAAMd,CAAC,GAAGrB,UAAU,CAACgB,KAAK,CAAC,GAAGhB,UAAU,CAACiB,cAAc,CAAC;EACxD,OAAO,OAAOC,CAAC,IAAIkB,CAAC,KAAKR,CAAC,OAAOP,CAAC,GAAG;AACzC,CAAC;AACD,MAAMgB,WAAW,GAAGA,CAACC,KAAK,EAAE1B,OAAO,GAAGH,mBAAmB,KAAK;EAC1D,MAAM;IAAEO;EAAM,CAAC,GAAGJ,OAAO;EACzB,IAAII,KAAK,KAAKuB,SAAS,IAAIvB,KAAK,KAAK,IAAI,EAAE;IACvC,OAAOsB,KAAK;EAChB;EACA,IAAI,CAAC,+CAA+C,CAACE,IAAI,CAACF,KAAK,CAAC,EAAE;IAC9D,OAAOA,KAAK;EAChB;EACA,MAAMG,UAAU,GAAGnC,KAAK,CAACoC,IAAI,CAACJ,KAAK,CAACK,QAAQ,CAAC,qBAAqB,CAAC,CAAC;EACpE,MAAMC,eAAe,GAAGH,UAAU,CAACI,MAAM,KAAK,CAAC;EAC/C,MAAMC,gBAAgB,GAAGR,KAAK,CAACS,QAAQ,CAAC,GAAG,CAAC;EAC5C,MAAMC,WAAW,GAAGhD,UAAU,CAACgB,KAAK,CAAC;EACrC,IAAI4B,eAAe,EAAE;IACjB,MAAMK,iBAAiB,GAAGhD,YAAY,CAACqC,KAAK,EAAE,kBAAkB,CAAC;IACjE,MAAMY,YAAY,GAAGD,iBAAiB,CAACF,QAAQ,CAAC,GAAG,CAAC;IACpD,IAAII,YAAY,GAAGC,MAAM,CAACH,iBAAiB,CAACI,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;IAClEF,YAAY,GAAGD,YAAY,GAAGrD,YAAY,CAACsD,YAAY,CAAC,GAAGnD,UAAU,CAACmD,YAAY,CAAC;IACnF,OAAOb,KAAK,CAACe,OAAO,CAAC,kBAAkB,EAAE,GAAGF,YAAY,GAAGH,WAAW,GAAGE,YAAY,GAAG,GAAG,GAAG,EAAE,GAAG,CAAC;EACxG;EACA,OAAOZ,KAAK,CAACe,OAAO,CAAC,KAAK,EAAEP,gBAAgB,GAAG,IAAIE,WAAW,GAAG,GAAG,MAAMA,WAAW,GAAG,CAAC;AAC7F,CAAC;AACD,MAAMM,wBAAwB,GAAGA,CAACC,IAAI,EAAEC,MAAM,KAAK,CAACC,aAAa,EAAE7C,OAAO,KAAK;EAC3E,IAAI,CAAC4C,MAAM,CAACX,MAAM,EAAE;IAChB,OAAO,EAAE;EACb;EACA,MAAMa,KAAK,GAAG9D,IAAI,CAAC+D,KAAK,CAACF,aAAa,CAAC;EACvC,MAAMnB,KAAK,GAAGkB,MAAM,CAACE,KAAK,GAAGF,MAAM,CAACX,MAAM,GAAG,CAAC,GAAGW,MAAM,CAACX,MAAM,GAAG,CAAC,GAAGa,KAAK,CAAC;EAC3E,IAAI,OAAOpB,KAAK,KAAK,QAAQ,EAAE;IAC3B,OAAOD,WAAW,CAACC,KAAK,EAAE1B,OAAO,CAAC;EACtC;EACA,IAAI2C,IAAI,KAAK,KAAK,EAAE;IAChB,OAAOjC,cAAc,CAACgB,KAAK,EAAE1B,OAAO,CAAC;EACzC;EACA,IAAI2C,IAAI,KAAK,KAAK,EAAE;IAChB,OAAO1B,cAAc,CAACS,KAAK,EAAE1B,OAAO,CAAC;EACzC;EACA,IAAI2C,IAAI,KAAK,KAAK,EAAE;IAChB,OAAOtB,cAAc,CAACK,KAAK,EAAE1B,OAAO,CAAC;EACzC;EACA,OAAOF,cAAc,CAAC4B,KAAK,EAAE1B,OAAO,CAAC;AACzC,CAAC;AACD,MAAMgD,0BAA0B,GAAGA,CAACL,IAAI,EAAEM,MAAM,KAAK,CAACJ,aAAa,EAAE7C,OAAO,KAAK;EAC7E,MAAM8C,KAAK,GAAG9D,IAAI,CAAC+D,KAAK,CAACF,aAAa,CAAC;EACvC,MAAMnB,KAAK,GAAGuB,MAAM,CAACH,KAAK,CAAC;EAC3B,IAAI,OAAOpB,KAAK,KAAK,QAAQ,EAAE;IAC3B,OAAOD,WAAW,CAACC,KAAK,EAAE1B,OAAO,CAAC;EACtC;EACA,IAAI2C,IAAI,KAAK,KAAK,EAAE;IAChB,OAAOjC,cAAc,CAACgB,KAAK,EAAE1B,OAAO,CAAC;EACzC;EACA,IAAI2C,IAAI,KAAK,KAAK,EAAE;IAChB,OAAO1B,cAAc,CAACS,KAAK,EAAE1B,OAAO,CAAC;EACzC;EACA,IAAI2C,IAAI,KAAK,KAAK,EAAE;IAChB,OAAOtB,cAAc,CAACK,KAAK,EAAE1B,OAAO,CAAC;EACzC;EACA,OAAOF,cAAc,CAAC4B,KAAK,EAAE1B,OAAO,CAAC;AACzC,CAAC;AACD,MAAMkD,gBAAgB,GAAIC,QAAQ,IAAK;EACnC,IAAIzD,KAAK,CAACC,OAAO,CAACwD,QAAQ,CAAC,EAAE;IACzB,OAAOT,wBAAwB,CAAC,KAAK,EAAES,QAAQ,CAAC;EACpD;EACA,IAAI,OAAOA,QAAQ,KAAK,UAAU,EAAE;IAChC,OAAOH,0BAA0B,CAAC,KAAK,EAAEG,QAAQ,CAAC;EACtD;EACA,IAAIzD,KAAK,CAACC,OAAO,CAACwD,QAAQ,CAACC,IAAI,CAAC,EAAE;IAC9B,OAAOV,wBAAwB,CAACS,QAAQ,CAACzB,KAAK,EAAEyB,QAAQ,CAACC,IAAI,CAAC;EAClE;EACA,MAAMC,WAAW,GAAGF,QAAQ,CAACF,MAAM;EACnC,IAAI,OAAOI,WAAW,KAAK,UAAU,EAAE;IACnC,MAAM,IAAIC,KAAK,CAAC,4EAA4E,CAAC;EACjG;EACA,OAAON,0BAA0B,CAACG,QAAQ,CAACzB,KAAK,EAAE2B,WAAW,CAAC;AAClE,CAAC;AACD,SAASH,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module"}