"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createAnimation = void 0;
const index_js_1 = require("../easing/index.js");
const createAnimation = (props) => {
    if (props.duration !== undefined && props.duration < 0) {
        throw new Error('Arwes createAnimation() does not support negative durations.');
    }
    const { duration: durationProvided, easing: easingName = 'outSine', direction = 'normal', repeat = 0, onUpdate, onFinish, onCancel } = props;
    const ease = typeof easingName === 'function' ? easingName : index_js_1.easing[easingName];
    const duration = durationProvided * 1000;
    let currentAnimationFrame = null;
    let start;
    let slapsed = 0;
    let done;
    let repetitions = 0;
    const promise = new Promise((resolve) => {
        done = resolve;
    });
    const then = (callback) => promise.then(callback);
    const nextAnimation = (timestamp) => {
        if (!start) {
            start = timestamp;
        }
        slapsed = Math.max(timestamp - start, 0);
        const progress = ease(duration === 0 ? 1 : Math.min(1, Math.max(0, slapsed / duration)));
        onUpdate(direction === 'normal' ? progress : 1 - progress);
        let continueAnimation = duration > 0 && slapsed < duration;
        if (!continueAnimation && repeat > 0 && repetitions < repeat) {
            start = timestamp;
            continueAnimation = true;
            repetitions++;
        }
        if (continueAnimation) {
            currentAnimationFrame = window.requestAnimationFrame(nextAnimation);
        }
        else {
            currentAnimationFrame = null;
            onFinish?.();
            done();
        }
    };
    const isPending = () => {
        return currentAnimationFrame !== null;
    };
    const cancel = () => {
        if (currentAnimationFrame !== null) {
            window.cancelAnimationFrame(currentAnimationFrame);
            currentAnimationFrame = null;
            onCancel?.();
            done();
        }
    };
    const complete = () => {
        if (currentAnimationFrame !== null) {
            window.cancelAnimationFrame(currentAnimationFrame);
            currentAnimationFrame = null;
            onUpdate(ease(direction === 'reverse' ? 0 : 1));
            onFinish?.();
            done();
        }
    };
    currentAnimationFrame = window.requestAnimationFrame(nextAnimation);
    return Object.freeze({ then, isPending, cancel, complete });
};
exports.createAnimation = createAnimation;
