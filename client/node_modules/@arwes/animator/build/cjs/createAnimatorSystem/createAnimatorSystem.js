"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createAnimatorSystem = void 0;
const tools_1 = require("@arwes/tools");
const constants_js_1 = require("../constants.js");
const createAnimatorMachine_js_1 = require("../internal/createAnimatorMachine.js");
const createAnimatorManager_js_1 = require("../internal/createAnimatorManager.js");
const isNodeConditionCorrect_js_1 = require("../internal/isNodeConditionCorrect.js");
const createAnimatorSystem = () => {
    const systemId = `s${Math.random()}`.replace('.', '');
    let nodeIdCounter = 0;
    let root;
    const createNode = (parent, setup) => {
        const nodeId = `${systemId}-n${nodeIdCounter++}`;
        const node = { id: nodeId };
        let dynamicSettingsOptional = null;
        let foreign = null;
        const control = Object.freeze({
            getSettings: () => {
                const setupSettings = setup?.getSettings() || {};
                const dynamicSettings = dynamicSettingsOptional || {};
                return {
                    ...setupSettings,
                    ...dynamicSettings,
                    duration: {
                        ...setupSettings.duration,
                        ...dynamicSettings.duration
                    },
                    condition: dynamicSettings.condition !== undefined
                        ? dynamicSettings.condition
                        : setupSettings.condition !== undefined
                            ? setupSettings.condition
                            : undefined,
                    onTransition: (node) => {
                        setupSettings.onTransition?.(node);
                        dynamicSettings.onTransition?.(node);
                    }
                };
            },
            setSettings: (newSettings) => {
                if (newSettings === null) {
                    dynamicSettingsOptional = null;
                    return;
                }
                dynamicSettingsOptional = {
                    ...dynamicSettingsOptional,
                    ...newSettings,
                    duration: {
                        ...dynamicSettingsOptional?.duration,
                        ...newSettings.duration
                    }
                };
            },
            getForeign: () => foreign,
            setForeign: (value) => {
                foreign = value;
            }
        });
        const initialSettings = control.getSettings();
        const machine = (0, createAnimatorMachine_js_1.createAnimatorMachine)(node, initialSettings.initialState ?? constants_js_1.ANIMATOR_DEFAULT_SETTINGS.initialState);
        const manager = (0, createAnimatorManager_js_1.createAnimatorManager)(node, initialSettings.manager ?? constants_js_1.ANIMATOR_DEFAULT_SETTINGS.manager);
        const nodeProps = {
            _parent: {
                value: parent,
                enumerable: true
            },
            _children: {
                value: new Set(),
                enumerable: true
            },
            _subscribers: {
                value: new Set(),
                enumerable: true
            },
            _watchers: {
                value: new Set(),
                enumerable: true
            },
            _scheduler: {
                value: (0, tools_1.createTOScheduler)(),
                enumerable: true
            },
            _getUserSettings: {
                value: () => {
                    const controlSettings = node.control.getSettings();
                    return {
                        ...constants_js_1.ANIMATOR_DEFAULT_SETTINGS,
                        ...(0, tools_1.filterProps)(controlSettings),
                        duration: {
                            ...constants_js_1.ANIMATOR_DEFAULT_SETTINGS.duration,
                            ...(controlSettings.duration ? (0, tools_1.filterProps)(controlSettings.duration) : null)
                        }
                    };
                },
                enumerable: true
            },
            _manager: {
                value: manager,
                enumerable: true,
                writable: true
            },
            id: {
                value: nodeId,
                enumerable: true
            },
            state: {
                get: () => machine.getState(),
                enumerable: true
            },
            control: {
                value: control,
                enumerable: true
            },
            settings: {
                get: () => {
                    const settings = node._getUserSettings();
                    let enter = settings.duration.enter;
                    if (settings.combine) {
                        const children = Array.from(node._children).filter((child) => {
                            const { condition } = child.control.getSettings();
                            return (0, isNodeConditionCorrect_js_1.isNodeConditionCorrect)(child, condition);
                        });
                        enter = node._manager.getDurationEnter(children);
                    }
                    return { ...settings, duration: { ...settings.duration, enter } };
                },
                enumerable: true
            },
            subscribe: {
                value: (subscriber) => {
                    node._subscribers.add(subscriber);
                    subscriber(node);
                    return () => node._subscribers.delete(subscriber);
                },
                enumerable: true
            },
            unsubscribe: {
                value: (subscriber) => {
                    node._subscribers.delete(subscriber);
                },
                enumerable: true
            },
            send: {
                value: machine.send,
                enumerable: true
            }
        };
        Object.defineProperties(node, nodeProps);
        if (parent) {
            parent._children.add(node);
        }
        return node;
    };
    const removeNode = (node) => {
        node._scheduler.stopAll();
        for (const child of node._children) {
            removeNode(child);
        }
        if (node._parent) {
            node._parent._children.delete(node);
        }
        node._children.clear();
        node._subscribers.clear();
        node._watchers.clear();
    };
    const register = (parentNode, setup) => {
        if (parentNode === undefined || parentNode === null) {
            if (root) {
                throw new Error('ARWES animator root node must be unregistered before registering another root node.');
            }
            root = createNode(undefined, setup);
            return root;
        }
        if (!root) {
            throw new Error('ARWES animator system requires an animator root node before registering children nodes. This means the provided animator parent node does not belong to the system.');
        }
        return createNode(parentNode, setup);
    };
    const unregister = (node) => {
        if (!root) {
            return;
        }
        for (const watcher of node._watchers) {
            watcher(node);
        }
        removeNode(node);
        if (root.id === node.id) {
            root = undefined;
        }
    };
    const system = {};
    const systemProps = {
        id: {
            value: systemId,
            enumerable: true
        },
        root: {
            get: () => root,
            enumerable: true
        },
        register: {
            value: register,
            enumerable: true
        },
        unregister: {
            value: unregister,
            enumerable: true
        }
    };
    Object.defineProperties(system, systemProps);
    return system;
};
exports.createAnimatorSystem = createAnimatorSystem;
