"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createAnimatorManager = void 0;
const constants_js_1 = require("../constants.js");
const createAnimatorManagerParallel = (node) => {
    const getDurationEnter = (childrenProvided) => {
        const children = childrenProvided || Array.from(node._children);
        return children.reduce((total, child) => {
            const { duration } = child.settings;
            return Math.max(total, duration.delay + duration.enter);
        }, 0);
    };
    const enterChildren = (children) => {
        for (const child of children) {
            const { duration } = child.settings;
            child._scheduler.start(duration.delay, () => child.send(constants_js_1.ANIMATOR_ACTIONS.enter));
        }
    };
    const exitChildren = (children) => {
        for (const child of children) {
            child._scheduler.start(0, () => child.send(constants_js_1.ANIMATOR_ACTIONS.exit));
        }
    };
    const destroy = () => { };
    return Object.freeze({
        name: constants_js_1.ANIMATOR_MANAGER_NAMES.parallel,
        getDurationEnter,
        enterChildren,
        exitChildren,
        destroy
    });
};
const createAnimatorManagerStagger = (node, name) => {
    const timelineCache = new Map();
    const getDurationEnter = (childrenProvided) => {
        let children = childrenProvided || Array.from(node._children);
        if (!children.length) {
            return 0;
        }
        if (name === constants_js_1.ANIMATOR_MANAGER_NAMES.staggerReverse) {
            children = children.reverse();
        }
        const { duration: { stagger } } = node._getUserSettings();
        let total = 0;
        let totalOffset = 0;
        let index = 0;
        for (const child of children) {
            const { enter, offset = 0, delay = 0 } = child.settings.duration;
            totalOffset += offset;
            total = Math.max(total, index * stagger + totalOffset + enter + delay);
            index++;
        }
        return total;
    };
    const enterChildren = (childrenProvided) => {
        let children = childrenProvided || Array.from(node._children);
        if (!children.length) {
            return;
        }
        if (name === constants_js_1.ANIMATOR_MANAGER_NAMES.staggerReverse) {
            children = [...children].reverse();
        }
        const now = Date.now();
        const parentSettings = node._getUserSettings();
        const staggerInMS = parentSettings.duration.stagger * 1000;
        const limit = parentSettings.duration.limit;
        for (const child of children) {
            if (timelineCache.has(child)) {
                continue;
            }
            const { duration } = child.settings;
            const offsetInMS = duration.offset * 1000;
            const enterDurationInMS = duration.enter * 1000 + offsetInMS;
            const timeline = Array.from(timelineCache)
                .map(([, durations]) => durations)
                .filter(([startTime, , enterDuration]) => startTime + enterDuration >= now)
                .sort((a, b) => a[0] - b[0]);
            let startTimeInMS = offsetInMS;
            let index = 0;
            for (const [itemStartTimeInMS] of timeline) {
                if (index === timeline.length - 1) {
                    startTimeInMS = Math.max(0, itemStartTimeInMS + staggerInMS + offsetInMS - now);
                    break;
                }
                const [nextItemStartTimeInMS, nextItemOffsetInMS] = timeline[index + 1];
                if (nextItemStartTimeInMS - itemStartTimeInMS - nextItemOffsetInMS >=
                    staggerInMS * 2 + offsetInMS) {
                    startTimeInMS = Math.max(0, itemStartTimeInMS + staggerInMS + offsetInMS - now);
                    break;
                }
                index++;
            }
            if (limit >= 0) {
                startTimeInMS = Math.min(startTimeInMS, limit * staggerInMS);
            }
            timelineCache.set(child, [now + startTimeInMS, offsetInMS, enterDurationInMS]);
            const onRemove = () => {
                timelineCache.delete(child);
            };
            const onTransition = () => {
                if (child.state !== constants_js_1.ANIMATOR_STATES.entering) {
                    onRemove();
                    child._watchers.delete(onRemove);
                    child._subscribers.delete(onTransition);
                }
            };
            child._watchers.add(onRemove);
            child._subscribers.add(onTransition);
            const scheduleTime = startTimeInMS / 1000 + duration.delay;
            child._scheduler.start(scheduleTime, () => child.send(constants_js_1.ANIMATOR_ACTIONS.enter));
        }
    };
    const exitChildren = (children) => {
        for (const child of children) {
            timelineCache.delete(child);
            child._scheduler.start(0, () => child.send(constants_js_1.ANIMATOR_ACTIONS.exit));
        }
    };
    const destroy = () => {
        timelineCache.clear();
    };
    return Object.freeze({ name, getDurationEnter, enterChildren, exitChildren, destroy });
};
const createAnimatorManagerSequence = (node, name) => {
    const timelineCache = new Map();
    const getDurationEnter = (childrenProvided) => {
        let children = childrenProvided || Array.from(node._children);
        if (!children.length) {
            return 0;
        }
        if (name === constants_js_1.ANIMATOR_MANAGER_NAMES.sequenceReverse) {
            children = [...children].reverse();
        }
        let total = 0;
        let endTime = 0;
        for (const child of children) {
            const { enter, offset = 0, delay = 0 } = child.settings.duration;
            endTime += offset + enter;
            total = Math.max(total, endTime + delay);
        }
        return total;
    };
    const enterChildren = (childrenProvided) => {
        let children = childrenProvided || Array.from(node._children);
        if (!children.length) {
            return;
        }
        if (name === constants_js_1.ANIMATOR_MANAGER_NAMES.sequenceReverse) {
            children = [...children].reverse();
        }
        const now = Date.now();
        const parentSettings = node._getUserSettings();
        const limit = parentSettings.duration.limit;
        for (const child of children) {
            if (timelineCache.has(child)) {
                continue;
            }
            const { duration } = child.settings;
            const enterDurationInMS = duration.enter * 1000 + duration.offset * 1000;
            const timeline = Array.from(timelineCache)
                .map(([, durations]) => durations)
                .filter(([startTime, enterDuration]) => startTime + enterDuration >= now)
                .sort((a, b) => a[0] - b[0]);
            let startTimeInMS = 0;
            let index = 0;
            for (const [itemStartTimeInMS, itemEnterDurationInMS] of timeline) {
                const itemEndTimeInMS = itemStartTimeInMS + itemEnterDurationInMS;
                if (index === timeline.length - 1) {
                    startTimeInMS = Math.max(0, itemEndTimeInMS - now);
                    break;
                }
                const [nextItemStartTimeInMS] = timeline[index + 1];
                if (nextItemStartTimeInMS - itemEndTimeInMS >= enterDurationInMS) {
                    startTimeInMS = Math.max(0, itemEndTimeInMS - now);
                    break;
                }
                index++;
            }
            if (limit > 0 && timeline.length >= limit) {
                const [lastItemInTimelineStartTimeInMS] = timeline[limit - 1];
                startTimeInMS = lastItemInTimelineStartTimeInMS - now;
            }
            timelineCache.set(child, [now + startTimeInMS, enterDurationInMS]);
            const onRemove = () => {
                timelineCache.delete(child);
            };
            const onTransition = () => {
                if (child.state !== constants_js_1.ANIMATOR_STATES.entering) {
                    onRemove();
                    child._watchers.delete(onRemove);
                    child._subscribers.delete(onTransition);
                }
            };
            child._watchers.add(onRemove);
            child._subscribers.add(onTransition);
            const scheduleTime = startTimeInMS / 1000 + duration.offset + duration.delay;
            child._scheduler.start(scheduleTime, () => child.send(constants_js_1.ANIMATOR_ACTIONS.enter));
        }
    };
    const exitChildren = (children) => {
        for (const child of children) {
            timelineCache.delete(child);
            child._scheduler.start(0, () => child.send(constants_js_1.ANIMATOR_ACTIONS.exit));
        }
    };
    const destroy = () => {
        timelineCache.clear();
    };
    return Object.freeze({ name, getDurationEnter, enterChildren, exitChildren, destroy });
};
const createAnimatorManagerSwitch = (node) => {
    let nodeHiding;
    let nodeVisible;
    let nodeSubscriberUnsubscribe;
    const getDurationEnter = () => {
        if (nodeVisible) {
            return nodeVisible.settings.duration.enter;
        }
        const nodeVisibleCurrent = Array.from(node._children).find((child) => {
            const { condition } = child._getUserSettings();
            return typeof condition === 'function'
                ? condition(child)
                : typeof condition === 'boolean'
                    ? condition
                    : true;
        });
        if (nodeVisibleCurrent) {
            return nodeVisibleCurrent.settings.duration.enter;
        }
        return 0;
    };
    const enterChildren = () => {
        nodeSubscriberUnsubscribe?.();
        nodeSubscriberUnsubscribe = undefined;
        const children = Array.from(node._children);
        const nodeVisibleNew = children.find((child) => {
            const { condition } = child._getUserSettings();
            return typeof condition === 'function'
                ? condition(child)
                : typeof condition === 'boolean'
                    ? condition
                    : true;
        });
        const onNextEnter = () => {
            if (nodeVisibleNew) {
                if (nodeVisibleNew === nodeVisible) {
                    nodeVisibleNew.send(constants_js_1.ANIMATOR_ACTIONS.enter);
                }
                else {
                    if (nodeVisible) {
                        nodeHiding = nodeVisible;
                        nodeSubscriberUnsubscribe = nodeHiding.subscribe((nodeHidingSubscribed) => {
                            if (nodeHidingSubscribed.state === constants_js_1.ANIMATOR_STATES.exited) {
                                nodeSubscriberUnsubscribe?.();
                                nodeSubscriberUnsubscribe = undefined;
                                nodeHiding = undefined;
                                nodeVisibleNew.send(constants_js_1.ANIMATOR_ACTIONS.enter);
                            }
                        });
                        nodeHiding?.send(constants_js_1.ANIMATOR_ACTIONS.exit);
                    }
                    else {
                        nodeVisibleNew.send(constants_js_1.ANIMATOR_ACTIONS.enter);
                        nodeHiding = undefined;
                    }
                    nodeVisible = nodeVisibleNew;
                }
            }
            else {
                nodeHiding = nodeVisible;
                nodeVisible = undefined;
            }
        };
        if (nodeHiding) {
            nodeSubscriberUnsubscribe = nodeHiding.subscribe((nodeHiding) => {
                if (nodeHiding.state === constants_js_1.ANIMATOR_STATES.exited) {
                    onNextEnter();
                }
            });
        }
        else {
            onNextEnter();
        }
        children
            .filter((child) => child !== nodeVisibleNew)
            .forEach((child) => child.send(constants_js_1.ANIMATOR_ACTIONS.exit));
    };
    const exitChildren = (children) => {
        for (const child of children) {
            child._scheduler.start(0, () => child.send(constants_js_1.ANIMATOR_ACTIONS.exit));
        }
    };
    const destroy = () => {
        nodeHiding = undefined;
        nodeVisible = undefined;
        nodeSubscriberUnsubscribe?.();
        nodeSubscriberUnsubscribe = undefined;
    };
    return Object.freeze({
        name: constants_js_1.ANIMATOR_MANAGER_NAMES.switch,
        getDurationEnter,
        enterChildren,
        exitChildren,
        destroy
    });
};
const createAnimatorManager = (node, manager) => {
    switch (manager) {
        case constants_js_1.ANIMATOR_MANAGER_NAMES.stagger:
            return createAnimatorManagerStagger(node, constants_js_1.ANIMATOR_MANAGER_NAMES.stagger);
        case constants_js_1.ANIMATOR_MANAGER_NAMES.staggerReverse:
            return createAnimatorManagerStagger(node, constants_js_1.ANIMATOR_MANAGER_NAMES.staggerReverse);
        case constants_js_1.ANIMATOR_MANAGER_NAMES.sequence:
            return createAnimatorManagerSequence(node, constants_js_1.ANIMATOR_MANAGER_NAMES.sequence);
        case constants_js_1.ANIMATOR_MANAGER_NAMES.sequenceReverse:
            return createAnimatorManagerSequence(node, constants_js_1.ANIMATOR_MANAGER_NAMES.sequenceReverse);
        case constants_js_1.ANIMATOR_MANAGER_NAMES.switch:
            return createAnimatorManagerSwitch(node, constants_js_1.ANIMATOR_MANAGER_NAMES.switch);
        default:
            return createAnimatorManagerParallel(node, constants_js_1.ANIMATOR_MANAGER_NAMES.parallel);
    }
};
exports.createAnimatorManager = createAnimatorManager;
