"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createFrameUnderlineSettings = void 0;
const tools_1 = require("@arwes/tools");
const animated_1 = require("@arwes/animated");
const defaultProps = {
    styled: true,
    animated: true,
    padding: 0,
    squareSize: 16,
    strokeWidth: 1
};
const createFrameUnderlineSettings = (props) => {
    const { styled, animated, squareSize: ss, strokeWidth: sw, padding: p } = { ...defaultProps, ...(props ? (0, tools_1.filterProps)(props) : null) };
    const so = sw / 2;
    return {
        elements: [
            {
                name: 'bg',
                style: {
                    filter: styled ? 'var(--arwes-frames-bg-filter)' : undefined,
                    fill: styled ? 'var(--arwes-frames-bg-color, currentcolor)' : undefined,
                    strokeWidth: 0
                },
                animated: animated && ['fade'],
                path: [
                    ['M', p, p],
                    ['L', p, `100% - ${p}`],
                    ['L', `100% - ${ss} - ${p}`, `100% - ${p}`],
                    ['L', `100% - ${p}`, `100% - ${ss} - ${p}`],
                    ['L', `100% - ${p}`, p]
                ]
            },
            {
                name: 'line',
                style: {
                    filter: styled ? 'var(--arwes-frames-line-filter)' : undefined,
                    fill: styled ? 'none' : undefined,
                    stroke: styled ? 'var(--arwes-frames-line-color, currentcolor)' : undefined,
                    strokeLinecap: styled ? 'round' : undefined,
                    strokeLinejoin: styled ? 'round' : undefined,
                    strokeWidth: String(sw)
                },
                animated: animated && {
                    transitions: {
                        entering: ({ element, duration }) => (0, animated_1.animateDraw)({ isEntering: true, element: element, duration }),
                        exiting: ({ element, duration }) => (0, animated_1.animateDraw)({ isEntering: false, element: element, duration })
                    }
                },
                path: [
                    ['M', so + p, `100% - ${so} - ${p}`],
                    ['L', `100% - ${ss} - ${p}`, `100% - ${so} - ${p}`],
                    ['L', `100% - ${so} - ${p}`, `100% - ${ss - so} - ${p}`]
                ]
            }
        ]
    };
};
exports.createFrameUnderlineSettings = createFrameUnderlineSettings;
