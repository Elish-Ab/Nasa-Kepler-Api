"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createFrameLinesSettings = void 0;
const tools_1 = require("@arwes/tools");
const defaultProps = {
    styled: true,
    animated: true,
    padding: 0,
    largeLineWidth: 1,
    smallLineWidth: 1,
    smallLineLength: 16
};
const createFrameLinesSettings = (props) => {
    const { styled, animated, padding: p, largeLineWidth, smallLineWidth, smallLineLength } = { ...defaultProps, ...(props ? (0, tools_1.filterProps)(props) : null) };
    const largePolylines = [
        [
            ['M', p, p + largeLineWidth / 2],
            ['H', '50% + 0.1']
        ],
        [
            ['M', `100% - ${p + largeLineWidth / 2}`, p + largeLineWidth / 2],
            ['H', '50% - 0.1']
        ],
        [
            ['M', p + largeLineWidth / 2, `100% - ${p + largeLineWidth / 2}`],
            ['H', '50% + 0.1']
        ],
        [
            ['M', `100% - ${p + largeLineWidth / 2}`, `100% - ${p + largeLineWidth / 2}`],
            ['H', '50% - 0.1']
        ]
    ];
    const smallPolylines = [
        [
            ['M', p, p + smallLineWidth / 2],
            ['h', smallLineLength]
        ],
        [
            ['M', `100% - ${p}`, p + smallLineWidth / 2],
            ['h', -smallLineLength]
        ],
        [
            ['M', p, `100% - ${p + smallLineWidth / 2}`],
            ['h', smallLineLength]
        ],
        [
            ['M', `100% - ${p}`, `100% - ${p + smallLineWidth / 2}`],
            ['h', -smallLineLength]
        ]
    ];
    return {
        elements: [
            {
                type: 'rect',
                name: 'bg',
                style: {
                    filter: styled ? 'var(--arwes-frames-bg-filter)' : undefined,
                    fill: styled ? 'var(--arwes-frames-bg-color, currentcolor)' : undefined,
                    strokeWidth: 0
                },
                animated: animated && ['fade'],
                x: p,
                y: p,
                width: `100% - ${p * 2}`,
                height: `100% - ${p * 2}`
            },
            {
                type: 'g',
                style: {
                    filter: styled ? 'var(--arwes-frames-line-filter)' : undefined,
                    fill: styled ? 'none' : undefined,
                    stroke: styled ? 'var(--arwes-frames-line-color, currentcolor)' : undefined,
                    strokeWidth: String(largeLineWidth)
                },
                elements: largePolylines.map((polyline) => ({
                    name: 'line',
                    animated: animated && ['draw'],
                    path: polyline
                }))
            },
            {
                type: 'g',
                style: {
                    filter: styled ? 'var(--arwes-frames-deco-filter)' : undefined,
                    fill: styled ? 'none' : undefined,
                    stroke: styled ? 'var(--arwes-frames-deco-color, currentcolor)' : undefined,
                    strokeWidth: String(smallLineWidth)
                },
                animated: animated && {
                    transitions: {
                        entering: ({ element, duration, animate }) => animate(element, { opacity: [0, 1, 0.5, 1] }, { duration: duration / 2 }),
                        exiting: ({ element, duration, animate }) => animate(element, { opacity: [1, 0, 0.5, 0] }, { duration: duration / 2 })
                    }
                },
                elements: smallPolylines.map((polyline) => ({ name: 'deco', path: polyline }))
            }
        ]
    };
};
exports.createFrameLinesSettings = createFrameLinesSettings;
