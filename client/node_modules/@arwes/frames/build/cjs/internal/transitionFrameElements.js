"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.transitionFrameElements = void 0;
const animated_1 = require("@arwes/animated");
const transitionElement = (element, contexts, animations, settings) => {
    if (!settings.contexts) {
        return;
    }
    const contextNames = Object.keys(settings.contexts);
    contextNames
        .map((name) => settings.contexts[name])
        .filter(Boolean)
        .map((context) => Object.keys(context)
        .map((stateName) => context[stateName])
        .map((state) => state?.className))
        .flat()
        .filter(Boolean)
        .forEach((className) => element.classList.remove(className));
    for (const contextName of contextNames) {
        const context = settings.contexts[contextName];
        const state = context[contexts[contextName]];
        if (!state) {
            continue;
        }
        if (state.className) {
            element.classList.add(state.className);
        }
        if (state.style) {
            (0, animated_1.applyAnimatedCSSProps)(element, state.style);
        }
        if (state.animate) {
            const elementContextAnimations = animations.get(element) ?? new Map();
            elementContextAnimations.get(contextName)?.cancel();
            const animation = (0, animated_1.createAnimatedXElement)({
                element,
                settingsRef: {
                    current: {
                        state: 'initial',
                        animated: {
                            transitions: {
                                initial: state.animate
                            }
                        }
                    }
                }
            });
            elementContextAnimations.set(contextName, animation);
        }
    }
};
const transitionFrameElements = (parent, contexts, animations, elementsSettings) => {
    const children = Array.from(parent.children);
    for (let index = 0; index < elementsSettings.length; index++) {
        const element = children[index];
        const settings = elementsSettings[index];
        if (!element) {
            throw new Error('ARWES frame elements did not match the original setup on transition.');
        }
        transitionElement(element, contexts, animations, settings);
        switch (settings.type) {
            case 'svg':
            case 'g':
            case 'defs':
            case 'clipPath':
            case 'mask': {
                if (Array.isArray(settings.elements)) {
                    transitionFrameElements(element, contexts, animations, settings.elements);
                }
                break;
            }
        }
    }
};
exports.transitionFrameElements = transitionFrameElements;
