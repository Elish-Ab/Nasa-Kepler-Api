"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.drawFrameElements = void 0;
const formatFramePath_js_1 = require("./formatFramePath.js");
const formatFrameDimension_js_1 = require("./formatFrameDimension.js");
const drawFrameElements = (parent, width, height, elementsSettings, contexts) => {
    const children = Array.from(parent.children);
    for (let index = 0; index < elementsSettings.length; index++) {
        const element = children[index];
        const settings = { ...elementsSettings[index] };
        const contextsNames = settings.contexts ? Object.keys(settings.contexts) : [];
        if (!element) {
            throw new Error('ARWES frame elements did not match the original setup on drawing.');
        }
        if (settings.type === undefined || settings.type === 'path') {
            for (const contextName of contextsNames) {
                const state = contexts[contextName];
                const elementState = settings.contexts[contextName][state];
                if (!elementState) {
                    continue;
                }
                elementState.path && (settings.path = elementState.path);
            }
            const d = typeof settings.path === 'string'
                ? settings.path
                : typeof settings.path === 'function'
                    ? settings.path({ width, height })
                    : (0, formatFramePath_js_1.formatFramePath)(width, height, settings.path);
            if (element.getAttribute('d') !== d) {
                element.setAttribute('d', d);
            }
        }
        else if (settings.type === 'rect') {
            for (const contextName of contextsNames) {
                const state = contexts[contextName];
                const elementState = settings.contexts[contextName][state];
                if (!elementState) {
                    continue;
                }
                elementState.x !== undefined && (settings.x = elementState.x);
                elementState.y !== undefined && (settings.y = elementState.y);
                elementState.width !== undefined && (settings.width = elementState.width);
                elementState.height !== undefined && (settings.height = elementState.height);
                elementState.rx !== undefined && (settings.rx = elementState.rx);
                elementState.ry !== undefined && (settings.ry = elementState.ry);
            }
            element.setAttribute('x', (0, formatFrameDimension_js_1.formatFrameDimension)(width, settings.x));
            element.setAttribute('y', (0, formatFrameDimension_js_1.formatFrameDimension)(height, settings.y));
            element.setAttribute('width', (0, formatFrameDimension_js_1.formatFrameDimension)(width, settings.width));
            element.setAttribute('height', (0, formatFrameDimension_js_1.formatFrameDimension)(height, settings.height));
            settings.rx !== undefined && element.setAttribute('rx', String(settings.rx));
            settings.ry !== undefined && element.setAttribute('ry', String(settings.ry));
        }
        else if (settings.type === 'ellipse') {
            let cx = settings.cx;
            let cy = settings.cy;
            let rx = settings.rx;
            let ry = settings.ry;
            for (const contextName of contextsNames) {
                const state = contexts[contextName];
                const elementState = settings.contexts[contextName][state];
                if (!elementState) {
                    continue;
                }
                elementState.cx !== undefined && (cx = elementState.cx);
                elementState.cy !== undefined && (cy = elementState.cy);
                elementState.rx !== undefined && (rx = elementState.rx);
                elementState.ry !== undefined && (ry = elementState.ry);
            }
            cx = (0, formatFrameDimension_js_1.formatFrameDimension)(width, cx);
            cy = (0, formatFrameDimension_js_1.formatFrameDimension)(height, cy);
            rx = (0, formatFrameDimension_js_1.formatFrameDimension)(width, rx);
            ry = (0, formatFrameDimension_js_1.formatFrameDimension)(height, ry);
            element.setAttribute('cx', cx);
            element.setAttribute('cy', cy);
            element.setAttribute('rx', rx);
            element.setAttribute('ry', ry);
        }
        else if (settings.type === 'svg') {
            let viewBox = settings.viewBox;
            let x = settings.x;
            let y = settings.y;
            let w = settings.width;
            let h = settings.height;
            for (const contextName of contextsNames) {
                const state = contexts[contextName];
                const elementState = settings.contexts[contextName][state];
                if (!elementState) {
                    continue;
                }
                elementState.viewBox !== undefined && (viewBox = elementState.viewBox);
                elementState.x !== undefined && (x = elementState.x);
                elementState.y !== undefined && (y = elementState.y);
                elementState.width !== undefined && (w = elementState.width);
                elementState.height !== undefined && (h = elementState.height);
            }
            w = (0, formatFrameDimension_js_1.formatFrameDimension)(width, w);
            h = (0, formatFrameDimension_js_1.formatFrameDimension)(height, h);
            x = (0, formatFrameDimension_js_1.formatFrameDimension)(width, x);
            y = (0, formatFrameDimension_js_1.formatFrameDimension)(height, y);
            element.setAttribute('viewBox', viewBox);
            element.setAttribute('x', x);
            element.setAttribute('y', y);
            element.setAttribute('width', w);
            element.setAttribute('height', h);
            if (Array.isArray(settings.elements)) {
                drawFrameElements(element, +w, +h, settings.elements, contexts);
            }
        }
        switch (settings.type) {
            case 'g':
            case 'defs':
            case 'clipPath':
            case 'mask': {
                if (Array.isArray(settings.elements)) {
                    drawFrameElements(element, width, height, settings.elements, contexts);
                }
                break;
            }
        }
        if (settings.draw) {
            settings.draw({ element: element, width, height });
        }
    }
};
exports.drawFrameElements = drawFrameElements;
