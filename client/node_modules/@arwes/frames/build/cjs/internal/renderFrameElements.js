"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.renderFrameElements = void 0;
const animated_1 = require("@arwes/animated");
const renderFrameElements = (parent, elements, animator, animations) => {
    const children = Array.from(parent.children);
    for (let index = 0; index < elements.length; index++) {
        const settings = elements[index];
        const element = children[index] ??
            document.createElementNS('http://www.w3.org/2000/svg', settings.type ?? 'path');
        const { name, id, className, style } = settings;
        if (name) {
            element.dataset.name = name;
        }
        if (id) {
            element.id = id;
        }
        if (className) {
            element.classList.value = className;
        }
        if (style) {
            (0, animated_1.applyAnimatedCSSProps)(element, style);
        }
        if (settings.type === 'svg') {
            element.setAttribute('xmlns', 'http://www.w3.org/2000/svg');
        }
        switch (settings.type) {
            case 'svg':
            case 'g':
            case 'defs':
            case 'clipPath':
            case 'mask': {
                if (typeof settings.elements === 'string') {
                    element.innerHTML = settings.elements;
                }
                else {
                    renderFrameElements(element, settings.elements, animator, animations);
                }
                break;
            }
        }
        if (animator && settings.animated) {
            const elementAnimations = animations.get(element) ?? new Map();
            const currentAnimatedElement = elementAnimations.get('__animator__');
            if (currentAnimatedElement) {
                currentAnimatedElement.settingsRef.current = {
                    ...settings.animatedSettings,
                    animated: settings.animated
                };
            }
            else {
                const animatedElement = (0, animated_1.createAnimatedElement)({
                    element,
                    animator,
                    settingsRef: {
                        current: {
                            ...settings.animatedSettings,
                            animated: settings.animated
                        }
                    }
                });
                elementAnimations.set('__animator__', animatedElement);
            }
            animations.set(element, elementAnimations);
        }
        if (!element.parentNode) {
            parent.appendChild(element);
        }
    }
};
exports.renderFrameElements = renderFrameElements;
