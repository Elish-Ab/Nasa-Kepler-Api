"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createBleepsManager = void 0;
const tools_1 = require("@arwes/tools");
const constants_js_1 = require("../constants.js");
const index_js_1 = require("../createBleep/index.js");
const categoryNames = Object.keys(constants_js_1.BLEEPS_CATEGORIES);
const createBleepsManager = (propsInitials) => {
    const props = structuredClone(propsInitials);
    const isBleepsAvailable = typeof window !== 'undefined' && !!window.AudioContext;
    const context = isBleepsAvailable ? new window.AudioContext() : null;
    const masterGain = isBleepsAvailable ? context.createGain() : null;
    const bleepNames = new Set(Object.keys(props.bleeps));
    const bleepsInternal = {};
    const syncVolume = () => {
        const globalVolume = Math.max(0, Math.min(1, props.master?.volume ?? 1));
        masterGain.gain.setValueAtTime(globalVolume, context.currentTime);
    };
    const getBleepProps = (bleepName) => {
        const bleepProps = props.bleeps[bleepName];
        const category = bleepProps.category ?? props.common?.category;
        const categoryProps = category ? props.categories?.[category] : null;
        const generalProps = { ...props.common, ...categoryProps };
        return { ...generalProps, ...bleepProps, context, masterGain };
    };
    const unload = () => {
        if (!isBleepsAvailable) {
            return;
        }
        bleepNames.forEach((bleepName) => {
            bleepsInternal[bleepName]?.unload();
        });
    };
    const updateProps = (newProps) => {
        if (newProps.master) {
            props.master = { ...props.master, ...(0, tools_1.filterProps)(newProps.master) };
        }
        if (newProps.common) {
            props.common = { ...props.common, ...(0, tools_1.filterProps)(newProps.common) };
        }
        const newCategoriesProps = newProps.categories;
        if (newCategoriesProps) {
            categoryNames.forEach((category) => {
                props.categories = props.categories ?? {};
                props.categories[category] = {
                    ...props.categories?.[category],
                    ...newCategoriesProps[category]
                };
            });
        }
        const newBleepsProps = newProps.bleeps;
        if (newBleepsProps) {
            Object.keys(newBleepsProps).forEach((key) => bleepNames.add(key));
            bleepNames.forEach((bleepName) => {
                props.bleeps[bleepName] = {
                    ...props.bleeps[bleepName],
                    ...newBleepsProps[bleepName]
                };
            });
        }
    };
    const updateBleeps = () => {
        bleepNames.forEach((bleepName) => {
            const bleepProps = getBleepProps(bleepName);
            if (bleepProps.disabled) {
                const bleep = bleepsInternal[bleepName];
                if (bleep) {
                    bleep.muted = true;
                    bleep.unload();
                }
                bleepsInternal[bleepName] = null;
            }
            else {
                const bleep = bleepsInternal[bleepName];
                if (bleep) {
                    bleep.update(bleepProps);
                }
                else {
                    bleepsInternal[bleepName] = (0, index_js_1.createBleep)(bleepProps);
                }
            }
        });
    };
    const update = (newProps) => {
        if (!isBleepsAvailable) {
            return;
        }
        updateProps(newProps);
        syncVolume();
        updateBleeps();
    };
    if (isBleepsAvailable) {
        masterGain.connect(context.destination);
        syncVolume();
        updateBleeps();
    }
    const bleeps = new Proxy(bleepsInternal, {
        get(obj, key) {
            const bleepName = key;
            if (bleepNames.has(bleepName)) {
                return obj[bleepName];
            }
            console.error(`ARWES bleeps manager bleep "${bleepName}" was not found and can not be played.`);
            return null;
        }
    });
    return Object.freeze({ bleeps, unload, update });
};
exports.createBleepsManager = createBleepsManager;
